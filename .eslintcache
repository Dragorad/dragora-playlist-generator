[{"/home/drag/Dr-plStyList-2/src/index.js":"1","/home/drag/Dr-plStyList-2/src/App.js":"2","/home/drag/Dr-plStyList-2/src/serviceWorker.js":"3","/home/drag/Dr-plStyList-2/src/stateContext/indexContext.js":"4","/home/drag/Dr-plStyList-2/src/Routes.js":"5","/home/drag/Dr-plStyList-2/src/stateContext/initialState.js":"6","/home/drag/Dr-plStyList-2/src/stateContext/reducers.js":"7","/home/drag/Dr-plStyList-2/src/stateContext/types.js":"8","/home/drag/Dr-plStyList-2/src/stateContext/preDefinedPlaylists.js":"9","/home/drag/Dr-plStyList-2/src/workers/genresAndInstrumentsList.js":"10","/home/drag/Dr-plStyList-2/src/workers/descriptorsList.js":"11","/home/drag/Dr-plStyList-2/src/components/adminView/UrlTitleForm.js":"12","/home/drag/Dr-plStyList-2/src/components/adminView/TitlesArtistQuery.js":"13","/home/drag/Dr-plStyList-2/src/components/navbar/PersistDrawer.jsx":"14","/home/drag/Dr-plStyList-2/src/components/adminView/UpdateFieldForm.js":"15","/home/drag/Dr-plStyList-2/src/components/authUsers/LoginModal.js":"16","/home/drag/Dr-plStyList-2/src/components/authUsers/Login.js":"17","/home/drag/Dr-plStyList-2/src/components/player/demoUrls.js":"18","/home/drag/Dr-plStyList-2/src/components/UserView/SlidersForm.js":"19","/home/drag/Dr-plStyList-2/src/components/navbar/InfoBox.jsx":"20","/home/drag/Dr-plStyList-2/src/components/UserView/notifyOptions.js":"21","/home/drag/Dr-plStyList-2/src/components/UserView/SnackBar.js":"22","/home/drag/Dr-plStyList-2/src/components/UserView/SliderMUI.js":"23","/home/drag/Dr-plStyList-2/src/components/UserView/GenreButton.jsx":"24","/home/drag/Dr-plStyList-2/src/components/player/PlayerCard.jsx":"25","/home/drag/Dr-plStyList-2/src/components/player/TitlesList.js":"26"},{"size":3373,"mtime":1596361288548,"results":"27","hashOfConfig":"28"},{"size":1074,"mtime":1596027264333,"results":"29","hashOfConfig":"28"},{"size":4951,"mtime":1574620648174,"results":"30","hashOfConfig":"28"},{"size":850,"mtime":1592496105542,"results":"31","hashOfConfig":"28"},{"size":875,"mtime":1590844461505,"results":"32","hashOfConfig":"28"},{"size":1091,"mtime":1601461693218,"results":"33","hashOfConfig":"28"},{"size":2010,"mtime":1601213480884,"results":"34","hashOfConfig":"28"},{"size":752,"mtime":1601213378800,"results":"35","hashOfConfig":"28"},{"size":5089,"mtime":1595335535190,"results":"36","hashOfConfig":"28"},{"size":427,"mtime":1595937019484,"results":"37","hashOfConfig":"28"},{"size":81,"mtime":1591216520784,"results":"38","hashOfConfig":"28"},{"size":3444,"mtime":1601760292258,"results":"39","hashOfConfig":"28"},{"size":3437,"mtime":1608498134313,"results":"40","hashOfConfig":"28"},{"size":6999,"mtime":1608584452381,"results":"41","hashOfConfig":"28"},{"size":3939,"mtime":1604958815808,"results":"42","hashOfConfig":"28"},{"size":11920,"mtime":1596026203832,"results":"43","hashOfConfig":"28"},{"size":1874,"mtime":1595335756066,"results":"44","hashOfConfig":"28"},{"size":1365,"mtime":1596026065872,"results":"45","hashOfConfig":"28"},{"size":8498,"mtime":1608498134313,"results":"46","hashOfConfig":"28"},{"size":6665,"mtime":1594449476903,"results":"47","hashOfConfig":"28"},{"size":419,"mtime":1601241991758,"results":"48","hashOfConfig":"28"},{"size":1560,"mtime":1608497479869,"results":"49","hashOfConfig":"28"},{"size":1632,"mtime":1608498134313,"results":"50","hashOfConfig":"28"},{"size":2864,"mtime":1601207385864,"results":"51","hashOfConfig":"28"},{"size":4909,"mtime":1610481811322,"results":"52","hashOfConfig":"28"},{"size":2424,"mtime":1596027841700,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},"1d0plfk",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"57"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"57"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"57"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"57"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"57"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"57"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"57"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"57"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"97"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"/home/drag/Dr-plStyList-2/src/index.js",["120"],"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { AppContextProvider } from './stateContext/indexContext'\nimport './index.css'\nimport { ApolloClient, HttpLink, InMemoryCache } from \"apollo-boost\";\nimport { setContext } from \"apollo-link-context\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport * as RealmWeb from \"realm-web\"\n// import { setContext } from \"apollo-link-context\"\n// import * as initialState from './stateContext/initialState'\n// import {reducer} from './stateContext/reducers'\n\n\nconst APP_ID = \"dragoraselectortest-sveyc\"\n\n\nexport const app = new RealmWeb.App({\n  id: APP_ID,\n  // baseUrl: \"https://realm.mongodb.com\"\n});\n\nconst credentials = RealmWeb.Credentials.anonymous();\ntry {\n  // Authenticate the user\n  const user = app.logIn(credentials)\n    .then(user => {\n      console.log('Loged anonimous ', user.id)\n    })\n  // `App.currentUser` updates to match the logged in user\n  // assert(user.id === app.currentUser.id)\n  // return user\n}\ncatch (err) {\n  console.error(\"Failed to log in\", err);\n}\n// Add an Authorization header with a valid user access token to all GraphQL requests\nconst authorizationHeaderLink = setContext(async (_, { headers }) => {\n  if (app.currentUser) {\n    // Refreshing custom data also refreshes the access token\n    await app.currentUser.refreshCustomData();\n  } else {\n    // If no user is logged in, log in an anonymous user\n    await app.logIn(RealmWeb.Credentials.anonymous());\n  }\n  // Get a valid access token for the current user\n  const { accessToken } = app.currentUser;\n  console.log(\"currentUser\", accessToken, app.currentUser);\n\n  // Set the Authorization header, preserving any other headers\n  return {\n    headers: {\n      ...headers,\n\n      Authorization: `Bearer ${accessToken}`\n\n    }\n  };\n});\n\n// Construct a new Apollo HttpLink that connects to your app's GraphQL endpoint\nconst graphql_url = `https://realm.mongodb.com/api/client/v2.0/app/${APP_ID}/graphql`;\nconst httpLink = new HttpLink({ uri: graphql_url });\n\n// Construct a new Apollo client with the links we just defined\nconst client = new ApolloClient({\n  link: authorizationHeaderLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\n// export const firstPlaylist = app.functions.generatePlaylist({ bpm: 169, delta: 20 })\n//   .then(playlist => {\n//     return playlist\n\n//   })\n\nexport const getNewPlayList = async (inputObj) => {\n  const playlist = await app.functions.generatePlaylist(inputObj)\n  return playlist\n}\n\nexport const setTitleUrl = async (urlObj) => {\n  const result = await app.functions.updateTitleUrl(urlObj)\n  return result\n}\nexport const setTitleGenres = async (genreObj) => {\n  const result = await app.functions.updateTitleGenres(genreObj)\n  return result\n}\nexport const setTitleInstruments = async (instrumObj) => {\n  const result = await app.functions.updateTitleInstruments(instrumObj)\n  return result\n}\n\nReactDOM.render(\n\n  <AppContextProvider >\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </AppContextProvider>\n  , document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n\n",["121","122"],"/home/drag/Dr-plStyList-2/src/App.js",[],"/home/drag/Dr-plStyList-2/src/serviceWorker.js",[],"/home/drag/Dr-plStyList-2/src/stateContext/indexContext.js",[],"/home/drag/Dr-plStyList-2/src/Routes.js",[],"/home/drag/Dr-plStyList-2/src/stateContext/initialState.js",["123","124","125"],"import { genresList } from '../workers/genresAndInstrumentsList'\nimport { descriptorsList } from '../workers/descriptorsList'\nimport { app } from '../index'\nimport { firstPlaylist } from '../index'\nimport * as playLists from './preDefinedPlaylists'\n\n// const initalPlaylist = firstPlaylist\n\nconst genresFilterList = genresList.join(' ').split(' ')\n  .filter(elem => elem !== \"and\")\n\n\n// export const getNewPlayList = async () => {\n//   const playlist = await app.functions.generatePlaylist({ bpm: 169, delta: 20 })\n//   console.log(playlist)\n//   return playlist\n// }\n\nexport const initialState = {\n  userId: '',\n  playListParams: {\n    Brightness: 30,\n    Loudness: 10,\n    Tempo: 20,\n    Diversity: 20,\n    diversityStrings: [],\n    genresStrings: [],\n    bpm: 120\n  },\n  genresArr: [],\n  descriptorsArr: ['Tempo', 'Brightness', 'Loudness'],\n  alertOpen: false,\n  sliderFormValues: {\n    genresList: genresFilterList,\n    Brightness: 35,\n    Loudness: 10,\n    Tempo: 40\n  },\n  diversity: {\n    value: 30,\n    params: []\n  },\n  urlIdx: 0,\n  playing: true,\n  playlist: playLists.playList6\n}\n","/home/drag/Dr-plStyList-2/src/stateContext/reducers.js",[],"/home/drag/Dr-plStyList-2/src/stateContext/types.js",[],"/home/drag/Dr-plStyList-2/src/stateContext/preDefinedPlaylists.js",[],"/home/drag/Dr-plStyList-2/src/workers/genresAndInstrumentsList.js",[],"/home/drag/Dr-plStyList-2/src/workers/descriptorsList.js",[],"/home/drag/Dr-plStyList-2/src/components/adminView/UrlTitleForm.js",["126"],"import React from 'react'\n// import { useMutation } from '@apollo/react-hooks'\nimport { TextField, Typography, div, Divider } from '@material-ui/core'\nimport { UpdateFieldForm } from './UpdateFieldForm'\n// import { UPDATE_TITLE_URL } from '../../graphql/Mutations'\nimport { setTitleUrl, setTitleGenres, setTitleInstruments } from '../../index'\nimport { notify } from 'react-notify-toast'\n\n\nexport default function UrlTitleForm(props) {\n\n  // const titleMBID = props.titleMBID\n  const { titleMBID, oldGenres, genres } = props\n  // const updatedUrl = props.url\n  const [urlString, setUrlString] = React.useState('')\n  const [updatedUrl, setUpdatedUrl] = React.useState(props.url)\n  // const [handleUpdateTitleRecordURL] = useMutation(UPDATE_TITLE_URL)\n  console.log(oldGenres)\n  const formStyles = {\n    display: 'flex',\n    flexDirection: 'column',\n    maxWidth: '90%',\n    margin: '1rem'\n  }\n  const handleChange = (event) => {\n    const { value } = event.target\n    setUrlString(value.substring(17))\n  }\n  const onUrlSubmit = async (e) => {\n    e.preventDefault()\n    const variableObj = {\n      titleMBID: titleMBID,\n      url: urlString\n    }\n    console.log(variableObj)\n    // handleUpdateTitleRecordURL(urlString)\n    setTitleUrl(variableObj)\n      .then(result => {\n        const newUrl = result[0].url\n        notify.show(`Title url is https://youtu.be/${newUrl} now`, 'success')\n        console.log(newUrl)\n        // h4String[0] += \" url updated\"\n        // // url = newUrl\n        setUpdatedUrl(newUrl)\n      }).catch(error => {\n        notify.show(error.message, \"error\")\n        console.log(error.message)})\n  }\n\n\n  let h4String = ['Handle Title URL', 'Handle Genres']\n  return (\n    <React.Fragment>\n      {updatedUrl != null ? <iframe width=\"180\"\n        title={props.url}\n        src={`https://www.youtube.com/embed/${props.url}`}>\n      </iframe>\n        : <p>No url provided </p>}\n\n      <div style={{\n        display: 'flex', maxWidth: '1200 px',\n        flexDirection: 'row', justifyItems: 'space-evently'\n      }}>\n        <form key={titleMBID + 'url'} style={formStyles}\n        >\n          <Typography component={\"h4\"} align={\"left\"} gutterBottom={true}>{h4String[0]}</Typography>\n          <TextField id={`${titleMBID}url-input`} label=\"url\" name='url'\n            value={urlString} placeholder={urlString}\n            onChange={handleChange}\n            // required={true}\n            variant={'outlined'}\n            helperText=\"You Tube url\"\n          />\n          <button type=\"submit\" onClick={onUrlSubmit}\n          >Update Title URL</button>\n        </form>\n        {/* <ItemsList arr={genresList} title='Genres' /> */}\n        \n        <UpdateFieldForm nameStr='Genres' style={formStyles}\n          titleMBID={titleMBID}\n          MBGenres={props.MBGenres}\n          oldGenres={props.oldGenres}\n          onSubmit={setTitleGenres} />\n        <Divider orientation='vertical' />\n        <div style={{ display: 'flex', padding: '1%' }}>\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            {['instruments solo', 'instruments oblig'].map(nameStr =>\n              <UpdateFieldForm\n                onSubmit={setTitleInstruments}\n                titleMBID={titleMBID}\n                nameStr={nameStr}\n                styles={formStyles} />)}\n          </div>\n        </div >\n        {/* <ItemsList arr={instrumentsList} title='Instruments' /> */}\n\n      </div >\n    </React.Fragment>\n  )\n}\n","/home/drag/Dr-plStyList-2/src/components/adminView/TitlesArtistQuery.js",["127","128"],"import {useState} from 'react'\nimport gql from 'graphql-tag'\nimport { useQuery } from '@apollo/react-hooks'\n// import { TextField, Typography } from '@material-ui/core'\nimport UrlTitleForm from './UrlTitleForm'\nimport Notifications from 'react-notify-toast'\n\nconst TITLE_DATA = gql`\n  query GetTitleData {\n    title_records\n    (\n      query: {url_exists: false} \n      sortBy: ARTIST_ASC)\n     {\n    _id\n     artist\n    titleName\n    chords_key\n    titleMBID\n    bpm\n    url\n    genres\n    tags{\n      genre\n      }}}\n`\nexport const TITLE_RECORD = gql`\nquery GetTitleRecord ($titleMBID: String){\n  title_record(query: {titleMBID: $titleMBID}) {\n    _id\n     artist\n    titleName\n    chords_key\n    titleMBID\n    bpm\n    url\n    genres\n    tags{\n      genre\n      }}}\n`\nexport const UPDATE_TITLE_GENRES = gql`\nmutation updateOneTitle_record ($titleMBID: String!, $genres:[String]){\n  updateOneTitle_record\n  (query: {titleMBID: $titleMBID}\n    set:{genres: $genres})  {\n    _id\n     artist\n    titleName\n    chords_key\n    titleMBID\n    bpm\n    url\n    genres\n    tags{\n      genre\n      }}}\n`\n\n// const UPDATE_TITLE = gql`\n// mutation UpdateTitleRecord ($titleMBID: String!, $url: String!){\n//  updateOneTitle_record(\n//     query: {titleMBID: $titleMBID}\n//     set: { url: $url}\n//     # skip: !$titleMBID\n//     ){\n//       titleName\n//       url\n//   }\n// }\n// `\n\nexport function TitlesArtistQuery() {\n  const { loading, error, data } = useQuery(TITLE_DATA)\n  // const { mutation_loading, mutation_error, mutation_data, refetch } = useMutation(UPDATE_TITLE_GENRES)\n  // const [handleUpdateTitleRecordURL] = useMutation(UPDATE_TITLE, {\n  //   variables: { titleMBID: 'data.titleMBID' },\n  //   skip: data == null\n  // })\n\n  const [url, setUrl] = useState(null)\n  const handleChange = (event) => {\n    setUrl(event.target.value);\n  }\n\n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error :( from TitleArtist Query {error.message} </p>\n\n  console.log(data.title_records.length)\n  let data1 = data.title_records.slice(0, 20)\n  // .filter(elem => elem.bpm > 149)\n  // filter(el => el.url == undefined)\n\n  console.log(data1)\n  return (\n    data1.map(({ _id, artist, titleName, bpm, chords_key, titleMBID, url, genres, tags }) => (\n      <div key={`title-data${_id}`} style={{\n        display: 'flex', flexDirection: 'column', paddingLeft: '3%',\n        borderBottom: '1px solid gray', maxWidth: '600 px'\n      }}>\n        <Notifications />\n        <p style={{ \"color\": \"blue\" }}>\n          {artist}: {titleName}\n          <p style={{ \"color\": \"red\" }} >\n            :: chords_key {chords_key} - bpm {bpm}\n          </p>\n          <p style={{ color: \"darkblue\" }} id={titleMBID}>\n            titleMBID: {titleMBID} <br />\n            titleURL: {url}  <br />\n            MBGenres: {tags.genre ? \"no tags defined\" : tags.genre} <br />\n            genres: {genres === null ? 'no genres yet' : genres.join('; ')} </p>\n        </p>\n        <div style={{ color: \" rgb(115, 41, 41)\", display: 'flex', alignItems: 'space-between' }}>\n          {/* {url != null ? <iframe width=\"180\"\n            src={`https://www.youtube.com/embed/${url}`}>\n          </iframe>\n            : <p>No url provided </p>} */}\n          <UrlTitleForm titleMBID={titleMBID}\n            MBGenres={tags.genre}\n            oldGenres={!genres ? [] : genres}\n            url={url}\n            key={_id + titleMBID} />\n\n        </div>\n      </div>\n    ))\n  )\n}\n","/home/drag/Dr-plStyList-2/src/components/navbar/PersistDrawer.jsx",["129","130","131","132","133","134"],"import React, { Suspense } from 'react'\nimport clsx from 'clsx'\nimport { makeStyles, useTheme, createMuiTheme, ThemeProvider } from '@material-ui/core/styles'\nimport Drawer from '@material-ui/core/Drawer'\n// import CssBaseline from '@material-ui/core/CssBaseline'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport List from '@material-ui/core/List'\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\n// import InboxIcon from '@material-ui/icons/MoveToInbox'\nimport ShareIcon from '@material-ui/icons/Share'\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic'\nimport SettingsIcon from '@material-ui/icons/Settings'\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity'\n// import GenresList from '../GenresContainer/GenresContainer'\n// import PlayerCard from '../player/PlayerCard'\nimport InfoBox from '../navbar/InfoBox'\nimport SlidersForm from '../UserView/SlidersForm'\nimport { Paper, Grid, Box } from '@material-ui/core'\n// import PlayerDr from '../player/Player'\n// import { demoUrls } from '../player/demoUrls'\n// import ReactPlayer from 'react-player'\nimport { blueGrey, lightBlue, blue } from '@material-ui/core/colors'\n// import { LogButton } from '../authUsers/Login'\nimport LoginInfoBox from '../authUsers/LoginModal'\nimport Notifications from 'react-notify-toast'\n\nconst PlayerCard = React.lazy(() => import('../player/PlayerCard'))\nconst drawerWidth = 240\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    maxWidth: '1200px',\n    display: 'flex',\n    justifyContent: 'flex-end'\n  },\n  appBar: {\n    display: 'flex',\n    backgroundColor: blue[900],\n\n    fontSize: \"1rem\",\n    justifyContent: 'space-between',\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(1),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    maxWidth: '1200px',\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}))\n\nexport default function PersistentDrawerLeft() {\n  const classes = useStyles()\n  const theme = useTheme()\n  const [open, setOpen] = React.useState(false)\n\n  const handleDrawerOpen = () => {\n    setOpen(true)\n  }\n\n  const handleDrawerClose = () => {\n    setOpen(false)\n  }\n\n  return (\n    <React.Fragment>\n      <Suspense fallback={<div> Loading...</div>}>\n        <Grid spacing={1} lg={10} xl={6}>\n          <AppBar\n            position=\"fixed\"\n            className={clsx(classes.appBar, {\n              [classes.appBarShift]: open,\n            })}\n          >\n            <Toolbar variant='dence'>\n              <IconButton\n                color=\"inherit\"\n                aria-label=\"open drawer\"\n                onClick={handleDrawerOpen}\n                edge=\"start\"\n                className={clsx(classes.menuButton, open && classes.hide)}\n              >\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h6\" noWrap flexShrink='2' >\n                DrAgora Music Selector Beta  !\n          </Typography>\n              <div style={{\n                display: 'flex',\n                position: 'relative', right: '1%',\n                alignItems: 'center',\n                justifyContent: 'space-between',\n                marginLeft: '20%'\n              }}>\n                {/* <LogButton /> */}\n                <LoginInfoBox />\n                <InfoBox />\n              </div>\n            </Toolbar>\n          </AppBar>\n        </Grid>\n        <Drawer\n          className={classes.drawer}\n          variant=\"persistent\"\n          anchor=\"left\"\n          open={open}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n        >\n          <div className={classes.drawerHeader}>\n            <IconButton onClick={handleDrawerClose}>\n              {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n            </IconButton>\n          </div>\n          <Divider />\n          <List>\n            {['Following', 'Playlists', 'Starred', 'Share'].map((text, index) => (\n              <ListItem button key={text}>\n                <ListItemIcon>{index % 2 === 0 ? <QueueMusicIcon /> : <ShareIcon />}</ListItemIcon>\n                <ListItemText primary={text} />\n              </ListItem>\n            ))}\n          </List>\n          <Divider />\n          <List>\n            {['Login', 'Preferences'].map((text, index) => (\n              <ListItem button key={text}>\n                <ListItemIcon>{index % 2 === 0 ? <PermIdentityIcon /> : <SettingsIcon />}</ListItemIcon>\n                <ListItemText primary={text} />\n              </ListItem>\n            ))}\n          </List>\n        </Drawer>\n        <main\n          className={clsx(classes.content, {\n            [classes.contentShift]: open,\n          })}\n        >\n          <Notifications />\n          <div className={classes.drawerHeader} />\n        </main>\n        {/* <content> */}\n        {/* <div style={{\n          display: 'flex',\n          flexFlow: 'row wrap',\n          alignItems: 'flex-start',\n          justify: 'space-between'\n        }}> */}\n\n        {/* <Paper elevation={4}> */}\n        {/* <div style={{width: '60%'}}> */}\n        <Grid container xs={12} spacing={1}\n          lg={10} xl={9}\n        >\n          <Grid item xs={12}\n          >\n            <SlidersForm />\n          </Grid>\n          <Grid item xs={12} lg={10} xl={9}>\n            <PlayerCard />\n          </Grid>\n        </Grid>\n      </Suspense>\n      {/* </div> */}\n      {/* </content> */}\n    </React.Fragment>\n\n  )\n}\n","/home/drag/Dr-plStyList-2/src/components/adminView/UpdateFieldForm.js",["135","136","137","138","139","140"],"import React from 'react'\nimport { TextField, Typography } from '@material-ui/core'\nimport { notify } from 'react-notify-toast';\n\n\n// props - nameStr   updateMutation\n\nconst formStyles = {\n    display: 'flex',\n    flexDirection: 'column',\n    maxWidth: '90%',\n    margin: '1rem'\n}\n// https://stackoverflow.com/questions/650022/how-do-i-split-a-string-with-multiple-separators-in-javascript\n\n\nfunction splitMulti(str, tokens) {\n    var tempChar = tokens[0]; // We can use the first token as a temporary join character\n    for (var i = 1; i < tokens.length; i++) {\n        str = str.split(tokens[i]).join(tempChar);\n    }\n    str = str.split(tempChar);\n    return str;\n}\nexport function UpdateFieldForm(props) {\n    const { nameStr, titleMBID } = props\n    const getNewGenresArr = (nameStr, props) => {\n        if (nameStr === \"Genres\") {\n            // console.log(props.oldGenres)\n            const MBGenres = Array.isArray(props.MBGenres) ? props.MBGenres : []\n\n            // https://stackoverflow.com/questions/35235794/filter-strings-in-array-based-on-content\n\n            // var textToSearch = 'bedroom';\n            // var filteredArray = myArray.filter((str)=>{\n            //   return str.toLowerCase().indexOf(textToSearch.toLowerCase()) >= 0; \n            // });\n            const excludeString = 'object'\n            const oldGenres = props.oldGenres.filter(el => {\n                const substrIdx = el.toLowerCase().indexOf(excludeString.toLowerCase())\n                if (substrIdx < 0) return el\n\n            })\n\n\n            const newGenresArr0 = MBGenres.concat(oldGenres)\n            const newGenresArr = Array.from(new Set(newGenresArr0))\n            return newGenresArr\n        }\n    }\n\n    const newGenresArr = props.oldGenres == undefined ? [] : getNewGenresArr(nameStr, props)\n    const litNameStr = '${nameStr}'\n    const [valueStr, setValueStr] = React.useState('')\n    const h4String = (`Handle ${nameStr}`).toUpperCase()\n    const submFunction = props.onSubmit\n\n    return (\n        <form key={`${titleMBID}-${nameStr}`} style={formStyles}\n            onSubmit={(e) => {\n                e.preventDefault()\n                const splitters = ['/', ', ', '-', ' ']\n                const valuesArr = nameStr === \"Genres\" ? newGenresArr : []\n\n                console.log(nameStr + ' : ' + valueStr)\n                valuesArr.push(valueStr)\n\n                // get unique values from stackoverflow\n\n                let newValuesArr = [...new Set(splitMulti(valuesArr.join(', '), splitters)\n                    .map(el => el.trim()).filter(elem => elem !== ''))]\n                const updateObj = { titleMBID: titleMBID, valuesArr: newValuesArr }\n                console.log(updateObj)\n                props.onSubmit(updateObj)\n                    .then(result => {\n                        console.log(result)\n                        //     const { genres, tags } = result\n                    }).catch(error => {\n                        notify.show(error.message, \"error\")\n                        console.log(error.message)\n                    })\n                // handleUpdateGenres(valueStr)\n\n                // h4String = \" field updated\"\n                // setUrlString('')\n            }}>\n            <Typography component={\"h4\"} align={\"left\"} gutterBottom={true}>{h4String}</Typography>\n            <TextField id={nameStr} label={nameStr} name={nameStr}\n                value={valueStr} placeholder={nameStr}\n                onChange={event => {\n                    event.preventDefault()\n                    let newValueStr = event.target.value\n                    // console.log(newValueStr)\n                    setValueStr(newValueStr)\n                }}\n                value={valueStr}\n                // required={true}\n                variant={'outlined'}\n                helperText={`Set ${nameStr}`}\n            />\n            <button type=\"submit\">{`update ${nameStr}`}</button>\n        </form>\n    )\n}","/home/drag/Dr-plStyList-2/src/components/authUsers/LoginModal.js",["141"],"import React, { useContext } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n// import ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport Modal from '@material-ui/core/Modal';\nimport {\n   Button, TextField, Typography, InputAdornment, IconButton,\n    FormControl, InputLabel, OutlinedInput, ButtonGroup\n} from '@material-ui/core'\nimport { blueGrey, grey } from '@material-ui/core/colors'\n// import PermIdentityIcon from '@material-ui/icons/PermIdentity'\nimport MailIcon from '@material-ui/icons/Mail'\nimport Visibility from '@material-ui/icons/Visibility'\nimport VisibilityOff from '@material-ui/icons/VisibilityOff'\nimport * as RealmWeb from 'realm-web'\nimport { app } from '../../index'\nimport * as types from '../../stateContext/types'\nimport { AppContext } from '../../stateContext/indexContext'\n\n// function rand() {\n//     return Math.round(Math.random() * 20) - 10;\n// }\nconst formStyles = {\n    display: 'flex',\n    flexDirection: 'column',\n    maxWidth: '90%',\n    margin: '1rem'\n}\nfunction getModalStyle() {\n    const top = 50\n    const left = 50\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        position: 'absolute',\n        width: 350,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #ffffff',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(1, 4, 3),\n        margin: theme.spacing(1)\n    },\n    button: {\n        backgroundColor: \"#ff1166\",\n        // padding: '1rem, 0',\n        label: {\n            color: \"secondary\",\n            fontSize: '3rem'\n        },\n        textInput: {\n            margin: '0 5%'\n        },\n        textField: {\n            color: 'blue'\n        }\n    }\n}))\n\n\n// Let registered users log in\n\nexport default function LoginInfoBox() {\n    const [appState, dispatch] = useContext(AppContext)\n    const classes = useStyles()\n    // getModalStyle is not a pure function, we roll the style only on the first render\n    const [modalStyle] = React.useState(getModalStyle);\n    const [open, setOpen] = React.useState(false)\n    const [state, setState] = React.useState({\n        userName: '',\n        passWord: '',\n        rePassWord: '',\n        showPassword: false,\n        signIn: true\n    })\n    const registerUser = async (email, password) => {\n        console.log('pass and rePass matching')\n        // TODO: Register a new user with the specified email and password\n        try {\n            const user = await app.auth.emailPassword.registerUser(email, password)\n            console.log(user.id)\n            logInEmailPass(email, password)\n        }\n        catch (err) { console.log(err.message) }\n\n    }\n    const logInEmailPass = async (email, password) => {\n        console.log(email + ' : ' + password)\n        // TODO: Log in with the specified email and password\n        try {\n            const credentials = RealmWeb.Credentials.emailPassword(email, password);\n            const user = await app.logIn(credentials)\n            dispatch({\n                type: types.SET_USER_DATA,\n                payload: {\n                    userID: user.id,\n                }\n            })\n            console.log(\"Successfully logged in!\", user)\n            handleModalClose()\n        } catch (err) {\n            console.error(\"Failed to log in\", err);\n        }\n    };\n\n    // Let logged in users log out\n    const logOut = async () => {\n        // TODO: Log the current user out\n        await app.logOut()\n        dispatch({\n            type: types.SET_USER_DATA,\n            payload: ''\n        })\n        // setUser(app.currentUser);\n    }\nconst loginAnonymous = async () => {\n\n        try {\n            const credentials = RealmWeb.Credentials.anonymous();\n\n            const user = await app.logIn(credentials)\n\n            dispatch({\n                type: types.SET_USER_DATA,\n                payload: {\n                    userID: user.id,\n                }\n            })\n            handleModalClose()\n            console.log(\"Successfully logged in!\", user)\n        }\n        catch (err) {\n            console.log(err.message)\n        }\n    }\n    const handleClickShowPassword = () => {\n        setState({ ...state, showPassword: !state.showPassword });\n    }\n    const handleInputChange = name => event => {\n        event.preventDefault()\n        setState({ ...state, [name]: event.target.value })\n    }\n    const handleModalOpen = () => {\n        setOpen(true);\n    }\n\n    const handleModalClose = () => {\n        setOpen(false);\n    }\n    const onBtnClick = bool => e => {\n        e.preventDefault()\n        setState({ ...state, signIn: bool })\n        console.log(state.signIn)\n    }\n    return (\n        <div>\n            {appState.userId === '' ? <Button\n                variant=\"outlined\"\n                size='small'\n                color='inherit'\n                backgroundColor={blueGrey[200]}\n                fontSize='0.8rem'\n                onClick={handleModalOpen}> Login/SignUp </Button> :\n                <Button name='LogOut' onClick={logOut} variant='outlined' size='small'\n                    style={{ backgroundColor: grey[400], marginBottom: '2%' }} >\n                    Log Out</Button>}\n\n            <Modal\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n                open={open}\n                onClose={handleModalClose}\n            >\n                <div style={modalStyle} className={classes.paper}>\n                    <ButtonGroup variant='text' fullWidth >\n                        <Button id='modalButton 0' onClick={onBtnClick(true)}>Log In</Button>\n                        <Button id='modalButton 1' onClick={onBtnClick(false)}>Sign UP</Button>\n                    </ButtonGroup>\n\n                    <p id=\"simple-modal-description\">\n                        <form key={'loginForm'} style={formStyles}\n                            onSubmit={() => {\n                                console.log(state)\n                                // handleUpdateGenres(valueStr)\n                                // h4String = \" field updated\"\n                                // setUrlString('')\n                            }}>\n                            {/* <Typography component={\"h4\"} align={\"left\"} gutterBottom={true}>{h4String}</Typography> */}\n\n                            <TextField id='userName' type='email' label={'E-mail'} name={'userName'}\n                                margin='normal'\n                                value={state.userName} placeholder='user name'\n                                onChange={handleInputChange('userName')}\n                                variant={'outlined'}\n                                // helperText={`user name`}\n                                InputProps={{\n                                    endAdornment: <InputAdornment position=\"start\">\n                                        <MailIcon /> </InputAdornment>,\n                                }}\n                            />\n                            <FormControl\n                                //  className={classes.textField}\n                                variant='outlined'>\n                                <InputLabel htmlFor=\"password\">Password</InputLabel>\n                                <OutlinedInput\n                                    id=\"passWord\"\n                                    type={state.showPassword ? 'text' : 'password'}\n                                    value={state.passWord}\n                                    onChange={handleInputChange('passWord')}\n                                    name='passWord'\n                                    endAdornment={\n                                        <InputAdornment position=\"end\">\n                                            <IconButton\n                                                aria-label=\"toggle password visibility\"\n                                                onClick={handleClickShowPassword}\n                                            // onMouseDown={handleMouseDownPassword}\n                                            >\n                                                {state.showPassword ? <Visibility /> : <VisibilityOff />}\n                                            </IconButton>\n                                        </InputAdornment>\n                                    }\n                                />\n                            </FormControl>\n\n                            {!state.signIn ?\n                                <React.Fragment>\n                                    <TextField id='rePassWord' label={'Retype Password'} name={'rePassWord'}\n                                        value={state.rePassWord} placeholder='Retype password'\n                                        onChange={handleInputChange('rePassWord')}\n                                        margin='normal'\n                                        variant={'outlined'}\n                                        type={state.showPassword ? 'text' : 'password'}\n                                        InputProps={{\n                                            endAdornment: <InputAdornment position=\"end\">\n                                                <IconButton\n                                                    aria-label=\"toggle password visibility\"\n                                                    onClick={handleClickShowPassword}  >\n                                                    {state.showPassword ? <Visibility /> : <VisibilityOff />}\n                                                </IconButton>\n                                            </InputAdornment>\n                                        }} />\n\n                                    <Button name='signUp' onClick={() => {\n                                        const { userName, passWord, rePassWord } = state\n                                        {\n                                            passWord !== rePassWord && alert(`Password and Retype don't match`)\n                                        }\n                                        registerUser(userName, passWord)\n                                    }}\n                                        variant='contained' style={{\n                                            backgroundColor: blueGrey[900], color: 'white',\n                                            marginBottom: '2%'\n                                        }}>Sign Up</Button>\n                                </React.Fragment>\n                                :\n                                <React.Fragment>\n                                    <Button name='emailPass' onClick={() => logInEmailPass(state.userName, state.passWord)} variant='contained' style={{\n                                        backgroundColor: blueGrey[900], color: 'white',\n                                        marginBottom: '2%'\n                                    }}>\n                                        Log In with e-mail and password</Button>\n                                    <Button name='annonymous' onClick={loginAnonymous} variant='contained'\n                                        style={{ backgroundColor: blueGrey[200], marginBottom: '2%' }}>\n                                        Log In Anonymous</Button>\n                                    <Button name='withGoogle' onClick={() => {\n                                        alert(\"Under Construction\")\n                                    }} variant='contained' style={{ backgroundColor: blueGrey[400], marginBottom: '2%' }} endIcon={<Typography> ?</Typography>}>\n                                        Log In with Google</Button>\n                                </React.Fragment>}\n\n                        </form>\n\n                    </p>\n\n                </div>\n            </Modal>\n        </div>\n    );\n}\n\n\n","/home/drag/Dr-plStyList-2/src/components/authUsers/Login.js",["142","143"],"import React, { useContext } from 'react'\nimport * as RealmWeb from \"realm-web\"\nimport { app } from '../../index'\nimport * as types from '../../stateContext/types'\nimport { AppContext } from '../../stateContext/indexContext'\nimport { Button, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        backgroundColor: \"#ff1166\",\n        margin: '1rem, 0',\n        label: {\n            color: \"secondary\",\n            fontSize: '3rem'\n        }\n    }\n}))\n\nexport const LogButton = () => {\n    const classes = useStyles()\n    const [appState, dispatch] = useContext(AppContext)\n    function UserDetail() {\n        return (\n            <div>\n                <h4>Logged in with anonymous id: {appState.userId}</h4>\n            </div>\n        );\n    }\n    const LoginButton = () => {\n        return (<Button variant=\"outlined\"\n            className={classes.button}\n            onClick={loginAnonymous}>\n            Log In\n        </Button>)\n    }\n    const LogOutButton = () => {\n        return (<Button variant=\"text\" color=\"default\"\n            onClick={logOut}>\n            Log Out\n        </Button>)\n    }\n    const logOut = async () => {\n        await app.logOut()\n        dispatch({\n            type: types.SET_USER_DATA,\n            payload: ''\n        })\n    }\nconst loginAnonymous = async () => {\n\n        const credentials = RealmWeb.Credentials.anonymous();\n\n        const user = await app.logIn(credentials)\n\n        dispatch({\n            type: types.SET_USER_DATA,\n            payload: {\n                userID: user.id,\n            }\n        })\n        console.log(\"Successfully logged in!\", user)\n\n    }\n    return (\n        <React.Fragment>\n            {appState.userId === '' ?\n                <LoginButton /> : <LogOutButton />}\n        </React.Fragment>\n    )\n}",["144","145"],"/home/drag/Dr-plStyList-2/src/components/player/demoUrls.js",[],"/home/drag/Dr-plStyList-2/src/components/UserView/SlidersForm.js",["146","147"],"import { useState, useContext } from 'react'\nimport { AppContext } from '../../stateContext/indexContext'\nimport * as types from '../../stateContext/types'\nimport SliderMUI from './SliderMUI'\nimport { Button, Grid, makeStyles } from '@material-ui/core'\nimport { genresList } from '../../workers/genresAndInstrumentsList'\nimport { descriptorsList } from '../../workers/descriptorsList'\nimport { ButtonsGroupMultiple } from './GenreButton'\nimport { blueGrey } from '@material-ui/core/colors'\nimport { getNewPlayList } from '../../index'\n// import SnackBar from './SnackBar'\nimport Notifications, { notify } from 'react-notify-toast'\nimport { notifyOptions } from './notifyOptions'\n\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        justifyContent: 'space-around',\n        overflow: 'hidden',\n        // color: 'red'\n    },\n    gridList: {\n        width: 200,\n        height: 100\n    },\n    paper: {\n        padding: '2%',\n        margin: 'auto'\n    },\n    buttonGroup: {\n        marginBottom: 1\n\n    }\n}))\n\nconst stateObj = {\n    randomInt: { min: 120, max: 180, step: 5, value: 180 },\n    Brightness: { min: 0, max: 100, step: 5, value: 65 },\n    Loudness: {\n        min: 1, max: 100, step: 5, value: 20,\n        valueLabelFormat: (x) => x + 60\n    },\n    Tempo: { min: 60, max: 180, step: 5, value: 10 },\n    Diversity: { min: 10, max: 50, step: 10, value: 10 },\n    diversityStrings: [],\n    genresButtons: {}\n}\n\nexport default function SlidersForm() {\n\n    const [state, setState] = useState(stateObj)\n    const [appState, dispatch] = useContext(AppContext)\n    const includedGenres = appState.genresArr.join(' ').split(' ')\n        .filter(el => el !== 'general' && el !== 'and')\n\n    const customInput = {\n        bpm: state.Tempo.value + 70,\n        delta: state.Diversity.value,\n        average_loudness: state.Loudness.value,\n        spectral_centroid: state.Brightness.value,\n        genresArr: includedGenres\n    }\n    const setNewPlaylist = customInput => {\n        console.log(customInput)\n        getNewPlayList(customInput)\n            .then(playlist => {\n                console.log(playlist)\n                dispatch({\n                    type: types.SET_NEW_PLAYLIST,\n                    payload: playlist\n                })\n                dispatch({\n                    type: types.SET_URL_IDX,\n                    payload: 0\n                })\n                dispatch({\n                    type: types.SET_PLAYING,\n                    payload: true\n                })\n                console.log(appState.playlist)\n            })\n    }\n\n    const onSliderChange = name => (ev, value) => {\n        setState({ ...state, [name]: { ...state[name], value: value } })\n        // setState({\n        //     ...state, [name]: value\n        // })\n        // alert(state[name])\n    }\n    const handleCommit = name => (ev, value) => {\n\n        console.log(state[name])\n        setState({ ...state, [name]: { ...state[name], value: value } })\n    }\n    const toggleAllGenres = e => {\n        e.preventDefault()\n        dispatch({\n            type: types.SET_GENRES,\n            payload: genresList\n        })\n    }\n    const deselectAllGenres = e => {\n        e.preventDefault()\n        dispatch({\n            type: types.SET_GENRES,\n            payload: []\n        })\n    }\n    // const handleSliderChange = name => (ev, value) => {\n    //     ev.preventDefault()\n    //     setState({\n    //         ...state, [name]: value\n    //     })\n    // }\n\n    const onSubmit = async (e) => {\n        e.preventDefault()\n        console.log(customInput)\n        !appState.genresArr.length ?\n            notify.show('You have to select at last one genre button or select all genres', \"error\", 7000)\n            : setNewPlaylist(customInput)\n    }\n\n    const classes = useStyles()\n    return (\n        <form style={{ padding: '1rem', margin: 'auto' }}>\n            <Notifications\n                options={notifyOptions} />\n            <Grid container\n                xs={12}\n                lg={10}\n                // xl={6}\n                spacing={1}\n                direction={'row'}\n                justifyContent={'space-between'}\n                alignItems={'baseline'}\n            >\n\n                <Grid item sx={12} sm={3} // genres buttons\n                    // style={{ border: '1px solid red' }}\n                    direction='row'>\n                    <Button style={{\n                        margin: '2% 0',\n                        backgroundColor: blueGrey[400],\n                        color: 'white'\n                    }}\n                        onClick={toggleAllGenres}\n                        fullWidth  > Select All Genres</Button>\n\n                    <ButtonsGroupMultiple inputArr={genresList}\n                        selected={true} sm={6}\n                    />\n                    <Button style={{ margin: '2% 0' }}\n                        variant=\"outlined\"\n                        onClick={deselectAllGenres}\n                        // type='submit'\n                        fullWidth  > DeSelect All Genres</Button>\n\n                </Grid>\n                <Grid item container xs={12} sm={9} //sliders and generate\n                    direction='row'\n                    // alignItems={'baseline'}\n                    spacing={1}\n                // style={{ border: '1px solid red' }}\n                // justify={'space-between'}\n                >\n\n                    <Grid item sm={7}//descriptor sliders\n                        container direction={'column'}\n                        // justifyContent={'st'}\n                        // alignItems={'center'}\n                        style={{ backgroundColor: 'none', height: '100%' }}>\n                        {descriptorsList.map((descriptor, key) => (\n                            <Grid item sm={12}>\n                                < SliderMUI key={key}\n                                    value={state[descriptor].value}\n                                    defaultValue={state[descriptor].value}\n                                    min={state[descriptor].min}\n                                    max={state[descriptor].max}\n                                    step={state[descriptor].step}\n                                    // aria-text={descriptor}\n                                    sliderText={descriptor}\n                                    disabled={!appState.descriptorsArr.includes(descriptor)}\n                                    name={descriptor}\n                                    onChange={onSliderChange(descriptor)}\n                                    onChangeComitted={handleCommit(descriptor)}\n                                    valueLabelFormat={descriptor === \"Tempo\" ?\n                                        state.Tempo.valueLabelFormat : (x) => x = x}\n                                />\n                            </Grid>\n                        ))}\n\n                        {/* <Divider variant='middle' /> */}\n                        {/* </Paper> */}\n                    </Grid>\n\n                    {/* <Divider orienta4tion='horizontal' flexItem /> */}\n\n                    <Grid container item sm={5} //diversity\n                    // style={{ backgroundColor: blueGrey[200], height: '100%' }}\n                    >\n                        <SliderMUI item\n                            //  height='10%'\n                            sliderText='Diversity'\n                            value={state.Diversity.value}\n                            defaultValue={state.Diversity.value}\n                            min={state.Diversity.min}\n                            max={state.Diversity.max}\n                            step={state.Diversity.step}\n                            aria-text={'Diversity'}\n                            name={'Diversity'}\n                            onChange={onSliderChange('Diversity')}\n                            onChangeComitted={handleCommit('Diversity')} />\n\n\n                        <ButtonsGroupMultiple sm={4} inputArr={descriptorsList} selected={false}\n                            classes={classes.buttonGroup} />\n\n                        <Button size={'medium'}\n                            style={{ margin: '5% 0' }}\n                            variant=\"outlined\"\n                            onClick={onSubmit}\n                            type='submit'\n                            fullWidth >Generate Playlist</Button>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </form >\n    )\n}\n","/home/drag/Dr-plStyList-2/src/components/navbar/InfoBox.jsx",["148","149","150","151","152","153","154","155","156","157","158"],"import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel'\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary'\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails'\nimport Typography from '@material-ui/core/Typography'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport GenreButton from '../UserView/GenreButton'\nimport Modal from '@material-ui/core/Modal';\nimport { Paper, Button } from '@material-ui/core'\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        position: 'absolute',\n        width: 350,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #ffffff',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(1, 4, 3),\n        margin: theme.spacing(1)\n    },\n    button:{\n        backgroundColor: \"#ff1166\",\n        // padding: '1rem, 0',\n        label:{\n            color: \"secondary\",\n            fontSize: '3rem'\n        }\n    }\n}));\n\nexport default function InfoBox() {\n    const classes = useStyles();\n    // getModalStyle is not a pure function, we roll the style only on the first render\n    const [modalStyle] = React.useState(getModalStyle);\n    const [open, setOpen] = React.useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div>\n           {/* <div> */}\n             <Button\n              variant=\"outlined\"\n            size='small'\n            color='inherit'\n            backgroundColor='#ff1133'\n            fontSize='0.8rem'\n            onClick={handleOpen}>\n               App Info\n                </Button>\n                {/* </div> */}\n                      <Modal\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n                open={open}\n                onClose={handleClose}\n                onClick={handleClose}\n            >\n                <div style={modalStyle} className={classes.paper}>\n                    <h2 id=\"simple-modal-title\">How to use</h2>\n                    <p id=\"simple-modal-description\">\n                    <Typography>\n//          Всяка една от композициите е избрана лично от опитен музикален редактор с доказано добър вкус.<br/>\n//          Изберете жанр, средно темпо и средна гръмкост и ще получите първите пет предложения.<br/>\n//          С Diversity управлявате диапазон на темпо, гръмкост и усреднена честота на траковете вътре в плейлистата.<br/>\n//          Можете да харесвате и нехаресвате конкретен трак. <br/>\n//          Регистрираните потребители могат да следват хората, които предлагат траковете и да запазват плейлисти.\n     </Typography>\n          </p>\n\n                </div>\n            </Modal>\n        </div>\n    );\n}\n\n\n\n// const useStyles = makeStyles(theme => ({\n//   root: {\n//     width: '60%',\n//   },\n//   heading: {\n//     fontSize: theme.typography.pxToRem(15),\n//     fontWeight: theme.typography.fontWeightRegular,\n//   },\n// }))\n\n// export default function InfoBox() {\n//   const classes = useStyles()\n\n//   return (\n//     <div className={classes.root}>\n//       <ExpansionPanel>\n//         <ExpansionPanelSummary\n//           expandIcon={<ExpandMoreIcon />}\n//           aria-controls=\"panel1a-content\"\n//           id=\"panel1a-header\"\n//         >\n//           <Typography className={classes.heading}>Expansion Panel 1</Typography>\n//         </ExpansionPanelSummary>\n//         <ExpansionPanelDetails>\n//           <Typography>\n//           <Typography paragraph>\n\n//          <Typography paragraph>\n//          Това е приложение за генериране на плейлисти в които няма да имате усещането, че слушате едно и също парче по много пъти!<br/>\n//          </Typography>\n//          Всяка една от композициите е избрана лично от висококласен музикален редактор с доказано добър вкус.<br/>\n//          Изберете жанр, средно темпо и средна гръмкост и ще получите първите пет предложения.<br/>\n//          С Diversity управлявате колко често да се сменят стила и темпата на траковете вътре в плейлистата.<br/>\n//          Можете да харесвате и нехаресвате конкретен трак. <br/>\n//          Регистрираните потребители могат да следват хората, които предлагат траковете и да запазват плейлисти<div className=\"\"></div><div className=\"\"></div>\n//          <div className=\"\"></div>\n//        </Typography>\n//           </Typography>\n//         </ExpansionPanelDetails>\n//       </ExpansionPanel>\n//       <ExpansionPanel>\n//         <ExpansionPanelSummary\n//           expandIcon={<ExpandMoreIcon />}\n//           aria-controls=\"panel2a-content\"\n//           id=\"panel2a-header\"\n//         >\n//           <Typography className={classes.heading}>Expansion Panel 2</Typography>\n//         </ExpansionPanelSummary>\n//         <ExpansionPanelDetails>\n//           <Typography>\n//             Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex,\n//             sit amet blandit leo lobortis eget.\n//           </Typography>\n//         </ExpansionPanelDetails>\n//       </ExpansionPanel>\n//       <ExpansionPanel disabled>\n//         <ExpansionPanelSummary\n//           expandIcon={<ExpandMoreIcon />}\n//           aria-controls=\"panel3a-content\"\n//           id=\"panel3a-header\"\n//         >\n//           <Typography className={classes.heading}>Disabled Expansion Panel</Typography>\n//         </ExpansionPanelSummary>\n//       </ExpansionPanel>\n//     </div>\n//   )\n// }\n","/home/drag/Dr-plStyList-2/src/components/UserView/notifyOptions.js",[],"/home/drag/Dr-plStyList-2/src/components/UserView/SnackBar.js",["159","160","161","162","163"],"import React, { useState, useContext } from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { AppContext } from '../../stateContext/indexContext'\nimport { SET_ALERT_OPEN } from '../../stateContext/types'\nimport { Button } from '@material-ui/core'\n\n\n\nexport default function SnackBar() {\n    const [appState, dispatch] = useContext(AppContext)\nconst alertOpen = false\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        dispatch({\n            type: SET_ALERT_OPEN,\n            payload: false\n        })\n    }\n    return (\n        <div>\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                open={alertOpen}\n                autoHideDuration={6000}\n                onClose={handleClose}\n                message=\"Note archived\"\n            // action={\n            //     <React.Fragment>\n            //         <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n            //             UNDO  </Button>\n\n            //         <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n            //             <CloseIcon fontSize=\"small\" />\n            //         </IconButton>\n            //     </React.Fragment>\n            // }\n            > You have to choose at least one genre </Snackbar>\n        </div>\n    )\n}\n","/home/drag/Dr-plStyList-2/src/components/UserView/SliderMUI.js",[],"/home/drag/Dr-plStyList-2/src/components/UserView/GenreButton.jsx",["164","165","166","167","168","169","170"],"import React, {useContext } from 'react'\nimport ToggleButton from '@material-ui/lab/ToggleButton'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Grid, Paper} from '@material-ui/core'\nimport { border, color } from '@material-ui/system'\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport {blueGrey, lightBlue } from '@material-ui/core/colors'\nimport { AppContext } from '../../stateContext/indexContext';\nimport { StylesProvider } from '@material-ui/core'\nimport { descriptorsList } from '../../workers/descriptorsList'\nimport { TOGGLE_BTN_STATE } from '../../stateContext/types'\n\n\n\n\nconst useStyles = makeStyles({\n  root: {\n    width: '100%',\n    height: '100%',\n    padding: '7%',\n    '&:hover': {\n      backgroundColor: blueGrey[200]\n    },\n    '&$selected': {\n      backgroundColor: blueGrey[400],\n      color: 'white'\n    },\n\n  },\n  selected: {},\n  // checked: {},\n  // hover: {},\n  label: {\n    padding: '1%',\n    // fontSize: '1 rem',\n    // textTransform: 'uppercase',\n    '&$:hover': {\n      textTransform: 'lowercase'\n    }\n  },\n})\n\n\nexport function ButtonsGroupMultiple(props) {\n\n  // const {btnState} = appState\n  // const {genresArr, descriptorsArr} = btnState\n  const [appState, dispatch] = useContext(AppContext)\n  // const [selected, setSelected] = React.useState(props.selected)\n  const inputArr = props.inputArr\n\n  const onButtonClick = name => (event) => {\n    const arrName = descriptorsList.includes(name) ? 'descriptorsArr' : 'genresArr'\n    // alert(arrName)\n    const newArr = appState[arrName].includes(name) ?\n      appState[arrName].filter(el => el !== name)\n      : [...appState[arrName], name]\n    console.log(newArr)\n    dispatch({\n      type: 'TOGGLE_BTN_STATE',\n      payload: [arrName, newArr]\n    })\n  }\n  const classes = useStyles()\n  return (\n    <Grid container alignItems='space-between'\n      alignItems='stretch'\n      // justify='space-evenly'\n      // style={{ height: '20' }}\n      spacing={1}>\n      {inputArr.map((text, index) => (\n        <Grid item xs={4} sm={props.sm} spacing={1}>\n          <Paper elevation={1}\n            style={{ height: '100%' }}>\n            <ToggleButton\n              key={index}\n              classes={{\n                root: classes.root,\n                selected: classes.selected,\n                label: classes.label\n              }}\n              aria-label={props.text}\n              value={text}\n              text={text}\n              variant='outlined'\n              selected={appState.genresArr.includes(text) || appState.descriptorsArr.includes(text)}\n              size={'medium'}\n              // name={name}\n              fullWidth\n              onChange={onButtonClick(text)}\n            >\n              {text}\n            </ToggleButton>\n          </Paper>\n        </Grid>\n      ))}\n      {/* </React.Fragment> */}\n    </Grid>\n\n\n  )\n}\n\n","/home/drag/Dr-plStyList-2/src/components/player/PlayerCard.jsx",[],"/home/drag/Dr-plStyList-2/src/components/player/TitlesList.js",[],{"ruleId":"171","severity":1,"message":"172","line":27,"column":9,"nodeType":"173","messageId":"174","endLine":27,"endColumn":13},{"ruleId":"175","replacedBy":"176"},{"ruleId":"177","replacedBy":"178"},{"ruleId":"171","severity":1,"message":"179","line":2,"column":10,"nodeType":"173","messageId":"174","endLine":2,"endColumn":25},{"ruleId":"171","severity":1,"message":"180","line":3,"column":10,"nodeType":"173","messageId":"174","endLine":3,"endColumn":13},{"ruleId":"171","severity":1,"message":"181","line":4,"column":10,"nodeType":"173","messageId":"174","endLine":4,"endColumn":23},{"ruleId":"171","severity":1,"message":"182","line":13,"column":33,"nodeType":"173","messageId":"174","endLine":13,"endColumn":39},{"ruleId":"171","severity":1,"message":"183","line":81,"column":10,"nodeType":"173","messageId":"174","endLine":81,"endColumn":13},{"ruleId":"171","severity":1,"message":"184","line":82,"column":9,"nodeType":"173","messageId":"174","endLine":82,"endColumn":21},{"ruleId":"171","severity":1,"message":"185","line":3,"column":32,"nodeType":"173","messageId":"174","endLine":3,"endColumn":46},{"ruleId":"171","severity":1,"message":"186","line":3,"column":48,"nodeType":"173","messageId":"174","endLine":3,"endColumn":61},{"ruleId":"171","severity":1,"message":"187","line":27,"column":10,"nodeType":"173","messageId":"174","endLine":27,"endColumn":15},{"ruleId":"171","severity":1,"message":"188","line":27,"column":23,"nodeType":"173","messageId":"174","endLine":27,"endColumn":26},{"ruleId":"171","severity":1,"message":"189","line":31,"column":10,"nodeType":"173","messageId":"174","endLine":31,"endColumn":18},{"ruleId":"171","severity":1,"message":"190","line":31,"column":20,"nodeType":"173","messageId":"174","endLine":31,"endColumn":29},{"ruleId":"191","severity":1,"message":"192","line":39,"column":57,"nodeType":"193","messageId":"194","endLine":39,"endColumn":59},{"ruleId":"195","severity":1,"message":"196","line":52,"column":42,"nodeType":"197","messageId":"198","endLine":52,"endColumn":44},{"ruleId":"171","severity":1,"message":"199","line":53,"column":11,"nodeType":"173","messageId":"174","endLine":53,"endColumn":21},{"ruleId":"200","severity":1,"message":"201","line":53,"column":24,"nodeType":"202","messageId":"203","endLine":53,"endColumn":36},{"ruleId":"171","severity":1,"message":"204","line":56,"column":11,"nodeType":"173","messageId":"174","endLine":56,"endColumn":23},{"ruleId":"205","severity":1,"message":"206","line":96,"column":17,"nodeType":"207","endLine":96,"endColumn":33},{"ruleId":"208","severity":1,"message":"209","line":250,"column":41,"nodeType":"210","messageId":"211","endLine":252,"endColumn":42},{"ruleId":"171","severity":1,"message":"212","line":6,"column":18,"nodeType":"173","messageId":"174","endLine":6,"endColumn":28},{"ruleId":"171","severity":1,"message":"213","line":23,"column":14,"nodeType":"173","messageId":"174","endLine":23,"endColumn":24},{"ruleId":"175","replacedBy":"214"},{"ruleId":"177","replacedBy":"215"},{"ruleId":"216","severity":1,"message":"217","line":191,"column":83,"nodeType":"173","messageId":"218","endLine":191,"endColumn":84},{"ruleId":"219","severity":1,"message":"220","line":213,"column":29,"nodeType":"207","endLine":213,"endColumn":52},{"ruleId":"171","severity":1,"message":"221","line":3,"column":8,"nodeType":"173","messageId":"174","endLine":3,"endColumn":22},{"ruleId":"171","severity":1,"message":"222","line":4,"column":8,"nodeType":"173","messageId":"174","endLine":4,"endColumn":29},{"ruleId":"171","severity":1,"message":"223","line":5,"column":8,"nodeType":"173","messageId":"174","endLine":5,"endColumn":29},{"ruleId":"171","severity":1,"message":"224","line":7,"column":8,"nodeType":"173","messageId":"174","endLine":7,"endColumn":22},{"ruleId":"171","severity":1,"message":"225","line":8,"column":8,"nodeType":"173","messageId":"174","endLine":8,"endColumn":19},{"ruleId":"171","severity":1,"message":"187","line":10,"column":10,"nodeType":"173","messageId":"174","endLine":10,"endColumn":15},{"ruleId":"226","severity":1,"message":"227","line":84,"column":33,"nodeType":"202","endLine":85,"endColumn":107},{"ruleId":"226","severity":1,"message":"227","line":85,"column":112,"nodeType":"202","endLine":86,"endColumn":97},{"ruleId":"226","severity":1,"message":"227","line":86,"column":102,"nodeType":"202","endLine":87,"endColumn":118},{"ruleId":"226","severity":1,"message":"227","line":87,"column":123,"nodeType":"202","endLine":88,"endColumn":63},{"ruleId":"226","severity":1,"message":"227","line":88,"column":68,"nodeType":"202","endLine":90,"endColumn":6},{"ruleId":"171","severity":1,"message":"228","line":1,"column":17,"nodeType":"173","messageId":"174","endLine":1,"endColumn":25},{"ruleId":"171","severity":1,"message":"229","line":3,"column":8,"nodeType":"173","messageId":"174","endLine":3,"endColumn":18},{"ruleId":"171","severity":1,"message":"230","line":4,"column":8,"nodeType":"173","messageId":"174","endLine":4,"endColumn":17},{"ruleId":"171","severity":1,"message":"231","line":7,"column":10,"nodeType":"173","messageId":"174","endLine":7,"endColumn":16},{"ruleId":"171","severity":1,"message":"232","line":12,"column":12,"nodeType":"173","messageId":"174","endLine":12,"endColumn":20},{"ruleId":"171","severity":1,"message":"233","line":5,"column":10,"nodeType":"173","messageId":"174","endLine":5,"endColumn":16},{"ruleId":"171","severity":1,"message":"234","line":5,"column":18,"nodeType":"173","messageId":"174","endLine":5,"endColumn":23},{"ruleId":"171","severity":1,"message":"235","line":6,"column":8,"nodeType":"173","messageId":"174","endLine":6,"endColumn":25},{"ruleId":"171","severity":1,"message":"190","line":7,"column":19,"nodeType":"173","messageId":"174","endLine":7,"endColumn":28},{"ruleId":"171","severity":1,"message":"236","line":9,"column":10,"nodeType":"173","messageId":"174","endLine":9,"endColumn":24},{"ruleId":"171","severity":1,"message":"237","line":11,"column":10,"nodeType":"173","messageId":"174","endLine":11,"endColumn":26},{"ruleId":"205","severity":1,"message":"206","line":67,"column":7,"nodeType":"207","endLine":67,"endColumn":27},"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["238"],"no-negated-in-lhs",["239"],"'descriptorsList' is defined but never used.","'app' is defined but never used.","'firstPlaylist' is defined but never used.","'genres' is assigned a value but never used.","'url' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'createMuiTheme' is defined but never used.","'ThemeProvider' is defined but never used.","'Paper' is defined but never used.","'Box' is defined but never used.","'blueGrey' is defined but never used.","'lightBlue' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'litNameStr' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'submFunction' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'Typography' is defined but never used.","'UserDetail' is defined but never used.",["238"],["239"],"no-self-assign","'x' is assigned to itself.","selfAssignment","jsx-a11y/aria-props","aria-text: This attribute is an invalid ARIA attribute.","'ExpansionPanel' is defined but never used.","'ExpansionPanelSummary' is defined but never used.","'ExpansionPanelDetails' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'GenreButton' is defined but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","'useState' is defined but never used.","'IconButton' is defined but never used.","'CloseIcon' is defined but never used.","'Button' is defined but never used.","'appState' is assigned a value but never used.","'border' is defined but never used.","'color' is defined but never used.","'ToggleButtonGroup' is defined but never used.","'StylesProvider' is defined but never used.","'TOGGLE_BTN_STATE' is defined but never used.","no-global-assign","no-unsafe-negation"]