[{"/home/drag/Dr-plStyList-2/src/index.js":"1","/home/drag/Dr-plStyList-2/src/App.js":"2","/home/drag/Dr-plStyList-2/src/serviceWorker.js":"3","/home/drag/Dr-plStyList-2/src/stateContext/indexContext.js":"4","/home/drag/Dr-plStyList-2/src/Routes.js":"5","/home/drag/Dr-plStyList-2/src/stateContext/initialState.js":"6","/home/drag/Dr-plStyList-2/src/stateContext/reducers.js":"7","/home/drag/Dr-plStyList-2/src/stateContext/types.js":"8","/home/drag/Dr-plStyList-2/src/stateContext/preDefinedPlaylists.js":"9","/home/drag/Dr-plStyList-2/src/workers/genresAndInstrumentsList.js":"10","/home/drag/Dr-plStyList-2/src/workers/descriptorsList.js":"11","/home/drag/Dr-plStyList-2/src/components/adminView/UrlTitleForm.js":"12","/home/drag/Dr-plStyList-2/src/components/adminView/TitlesArtistQuery.js":"13","/home/drag/Dr-plStyList-2/src/components/navbar/PersistDrawer.jsx":"14","/home/drag/Dr-plStyList-2/src/components/adminView/UpdateFieldForm.js":"15","/home/drag/Dr-plStyList-2/src/components/authUsers/LoginModal.js":"16","/home/drag/Dr-plStyList-2/src/components/authUsers/Login.js":"17","/home/drag/Dr-plStyList-2/src/components/player/demoUrls.js":"18","/home/drag/Dr-plStyList-2/src/components/UserView/SlidersForm.js":"19","/home/drag/Dr-plStyList-2/src/components/navbar/InfoBox.jsx":"20","/home/drag/Dr-plStyList-2/src/components/UserView/notifyOptions.js":"21","/home/drag/Dr-plStyList-2/src/components/UserView/SnackBar.js":"22","/home/drag/Dr-plStyList-2/src/components/UserView/SliderMUI.js":"23","/home/drag/Dr-plStyList-2/src/components/UserView/GenreButton.jsx":"24","/home/drag/Dr-plStyList-2/src/components/player/PlayerCard.jsx":"25","/home/drag/Dr-plStyList-2/src/components/player/TitlesList.js":"26","/home/drag/Dr-plStyList-2/src/components/player/PlayerControlButtons.jsx":"27","/home/drag/Dr-plStyList-2/src/components/UserView/GenresButtonsGroup.js":"28","/home/drag/Dr-plStyList-2/src/components/player/PlayerDr.js":"29","/home/drag/Dr-plStyList-2/src/credential/AppId.js":"30"},{"size":3557,"mtime":1616874167544,"results":"31","hashOfConfig":"32"},{"size":1339,"mtime":1616880111198,"results":"33","hashOfConfig":"32"},{"size":4951,"mtime":1574620648174,"results":"34","hashOfConfig":"32"},{"size":850,"mtime":1616699547481,"results":"35","hashOfConfig":"32"},{"size":1144,"mtime":1615023952419,"results":"36","hashOfConfig":"32"},{"size":1115,"mtime":1616706135139,"results":"37","hashOfConfig":"32"},{"size":2146,"mtime":1616706603895,"results":"38","hashOfConfig":"32"},{"size":793,"mtime":1616706271935,"results":"39","hashOfConfig":"32"},{"size":5089,"mtime":1595335535190,"results":"40","hashOfConfig":"32"},{"size":427,"mtime":1595937019484,"results":"41","hashOfConfig":"32"},{"size":81,"mtime":1591216520784,"results":"42","hashOfConfig":"32"},{"size":3444,"mtime":1601760292258,"results":"43","hashOfConfig":"32"},{"size":3437,"mtime":1608498134313,"results":"44","hashOfConfig":"32"},{"size":7720,"mtime":1616873441195,"results":"45","hashOfConfig":"32"},{"size":3939,"mtime":1604958815808,"results":"46","hashOfConfig":"32"},{"size":12132,"mtime":1617304920842,"results":"47","hashOfConfig":"32"},{"size":1874,"mtime":1595335756066,"results":"48","hashOfConfig":"32"},{"size":1365,"mtime":1596026065872,"results":"49","hashOfConfig":"32"},{"size":6076,"mtime":1617190140745,"results":"50","hashOfConfig":"32"},{"size":6658,"mtime":1615152228174,"results":"51","hashOfConfig":"32"},{"size":419,"mtime":1601241991758,"results":"52","hashOfConfig":"32"},{"size":1560,"mtime":1608497479869,"results":"53","hashOfConfig":"32"},{"size":1656,"mtime":1610575956355,"results":"54","hashOfConfig":"32"},{"size":2867,"mtime":1615636387750,"results":"55","hashOfConfig":"32"},{"size":4454,"mtime":1615032375834,"results":"56","hashOfConfig":"32"},{"size":3298,"mtime":1617289303715,"results":"57","hashOfConfig":"32"},{"size":3603,"mtime":1615152118633,"results":"58","hashOfConfig":"32"},{"size":1418,"mtime":1612008714715,"results":"59","hashOfConfig":"32"},{"size":2576,"mtime":1615636747398,"results":"60","hashOfConfig":"32"},{"size":51,"mtime":1615736742431,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"65"},"1d0plfk",{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"65"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"65"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"65"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"65"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"65"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"120"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"65"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"65"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},"/home/drag/Dr-plStyList-2/src/index.js",["136","137"],"import React, { Suspense, lazy, useContext } from 'react'\nimport ReactDOM from 'react-dom'\nimport { AppContextProvider, AppContext } from './stateContext/indexContext'\nimport './index.css'\nimport { ApolloClient, HttpLink, InMemoryCache } from \"apollo-boost\";\nimport { setContext } from \"apollo-link-context\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport * as serviceWorker from './serviceWorker'\nimport * as RealmWeb from \"realm-web\"\nimport { APP_ID } from './credential/AppId';\n\nconst App = lazy(() => import('./App'))\n\nexport const app = new RealmWeb.App({\n  id: APP_ID,\n  // baseUrl: \"https://realm.mongodb.com\"\n});\nconsole.log(app.currentUser)\n\n// const credentials = RealmWeb.Credentials.anonymous();\n// try {\n//   // Authenticate the user\n//   const user = app.logIn(credentials)\n//     .then(user => {\n//       console.log('Loged anonimous ', user.id)\n//     })\n//   // `App.currentUser` updates to match the logged in user\n//   // assert(user.id === app.currentUser.id)\n//   // return user\n// }\n// catch (err) {\n//   console.error(\"Failed to log in\", err);\n// }\n// Add an Authorization header with a valid user access token to all GraphQL requests\nconst authorizationHeaderLink = setContext(async (_, { headers }) => {\n  if (app.currentUser) {\n    // Refreshing custom data also refreshes the access token\n    await app.currentUser.refreshCustomData();\n  } else {\n    // If no user is logged in, log in an anonymous user\n\n    // await app.logIn(RealmWeb.Credentials.anonymous());\n    console.log('from index.js', app.user)\n  }\n  // Get a valid access token for the current user\n  const { accessToken } = app.currentUser;\n  console.log(\"currentUser\", accessToken, app.currentUser);\n\n  // Set the Authorization header, preserving any other headers\n  return {\n    headers: {\n      ...headers,\n\n      Authorization: `Bearer ${accessToken}`\n\n    }\n  };\n});\n\n// Construct a new Apollo HttpLink that connects to your app's GraphQL endpoint\nconst graphql_url = `https://realm.mongodb.com/api/client/v2.0/app/${APP_ID}/graphql`;\nconst httpLink = new HttpLink({ uri: graphql_url });\n\n// Construct a new Apollo client with the links we just defined\nconst client = new ApolloClient({\n  link: authorizationHeaderLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nexport const getNewPlayList = async (inputObj) => {\n  const playlist = await app.currentUser.callFunction('generatePlaylist', inputObj)\n  return playlist\n}\n\nexport const setTitleUrl = async (urlObj) => {\n  const result = await app.currentUser.callFunction('updateTitleUrl', urlObj)\n  return result\n}\nexport const setTitleGenres = async (genreObj) => {\n  const result = await app.currentUser.callFunction('updateTitleGenres', genreObj)\n  return result\n}\nexport const setTitleInstruments = async (instrumObj) => {\n  const result = await app.currentUser.callFunction('updateTitleInstruments', instrumObj)\n  return result\n}\n\n\nconst ImgLoader = () => {\n  return (\n    <React.Fragment>\n\n      <img src='./svg-icons/busic-player-circle-start.svg'\n\n        alt='LLLLLLLLLLLLLLLoading...' />\n    </React.Fragment>\n  )\n}\nReactDOM.render(\n\n  <AppContextProvider >\n    <ApolloProvider client={client}>\n      <Suspense fallback={ImgLoader}>\n        <App />\n      </Suspense>\n    </ApolloProvider>\n  </AppContextProvider>\n  , document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n\n",["138","139"],"/home/drag/Dr-plStyList-2/src/App.js",[],"/home/drag/Dr-plStyList-2/src/serviceWorker.js",[],"/home/drag/Dr-plStyList-2/src/stateContext/indexContext.js",[],"/home/drag/Dr-plStyList-2/src/Routes.js",[],"/home/drag/Dr-plStyList-2/src/stateContext/initialState.js",[],"/home/drag/Dr-plStyList-2/src/stateContext/reducers.js",[],"/home/drag/Dr-plStyList-2/src/stateContext/types.js",[],"/home/drag/Dr-plStyList-2/src/stateContext/preDefinedPlaylists.js",[],"/home/drag/Dr-plStyList-2/src/workers/genresAndInstrumentsList.js",[],"/home/drag/Dr-plStyList-2/src/workers/descriptorsList.js",[],"/home/drag/Dr-plStyList-2/src/components/adminView/UrlTitleForm.js",["140"],"import React from 'react'\n// import { useMutation } from '@apollo/react-hooks'\nimport { TextField, Typography, div, Divider } from '@material-ui/core'\nimport { UpdateFieldForm } from './UpdateFieldForm'\n// import { UPDATE_TITLE_URL } from '../../graphql/Mutations'\nimport { setTitleUrl, setTitleGenres, setTitleInstruments } from '../../index'\nimport { notify } from 'react-notify-toast'\n\n\nexport default function UrlTitleForm(props) {\n\n  // const titleMBID = props.titleMBID\n  const { titleMBID, oldGenres, genres } = props\n  // const updatedUrl = props.url\n  const [urlString, setUrlString] = React.useState('')\n  const [updatedUrl, setUpdatedUrl] = React.useState(props.url)\n  // const [handleUpdateTitleRecordURL] = useMutation(UPDATE_TITLE_URL)\n  console.log(oldGenres)\n  const formStyles = {\n    display: 'flex',\n    flexDirection: 'column',\n    maxWidth: '90%',\n    margin: '1rem'\n  }\n  const handleChange = (event) => {\n    const { value } = event.target\n    setUrlString(value.substring(17))\n  }\n  const onUrlSubmit = async (e) => {\n    e.preventDefault()\n    const variableObj = {\n      titleMBID: titleMBID,\n      url: urlString\n    }\n    console.log(variableObj)\n    // handleUpdateTitleRecordURL(urlString)\n    setTitleUrl(variableObj)\n      .then(result => {\n        const newUrl = result[0].url\n        notify.show(`Title url is https://youtu.be/${newUrl} now`, 'success')\n        console.log(newUrl)\n        // h4String[0] += \" url updated\"\n        // // url = newUrl\n        setUpdatedUrl(newUrl)\n      }).catch(error => {\n        notify.show(error.message, \"error\")\n        console.log(error.message)})\n  }\n\n\n  let h4String = ['Handle Title URL', 'Handle Genres']\n  return (\n    <React.Fragment>\n      {updatedUrl != null ? <iframe width=\"180\"\n        title={props.url}\n        src={`https://www.youtube.com/embed/${props.url}`}>\n      </iframe>\n        : <p>No url provided </p>}\n\n      <div style={{\n        display: 'flex', maxWidth: '1200 px',\n        flexDirection: 'row', justifyItems: 'space-evently'\n      }}>\n        <form key={titleMBID + 'url'} style={formStyles}\n        >\n          <Typography component={\"h4\"} align={\"left\"} gutterBottom={true}>{h4String[0]}</Typography>\n          <TextField id={`${titleMBID}url-input`} label=\"url\" name='url'\n            value={urlString} placeholder={urlString}\n            onChange={handleChange}\n            // required={true}\n            variant={'outlined'}\n            helperText=\"You Tube url\"\n          />\n          <button type=\"submit\" onClick={onUrlSubmit}\n          >Update Title URL</button>\n        </form>\n        {/* <ItemsList arr={genresList} title='Genres' /> */}\n        \n        <UpdateFieldForm nameStr='Genres' style={formStyles}\n          titleMBID={titleMBID}\n          MBGenres={props.MBGenres}\n          oldGenres={props.oldGenres}\n          onSubmit={setTitleGenres} />\n        <Divider orientation='vertical' />\n        <div style={{ display: 'flex', padding: '1%' }}>\n          <div style={{ display: 'flex', flexDirection: 'column' }}>\n            {['instruments solo', 'instruments oblig'].map(nameStr =>\n              <UpdateFieldForm\n                onSubmit={setTitleInstruments}\n                titleMBID={titleMBID}\n                nameStr={nameStr}\n                styles={formStyles} />)}\n          </div>\n        </div >\n        {/* <ItemsList arr={instrumentsList} title='Instruments' /> */}\n\n      </div >\n    </React.Fragment>\n  )\n}\n","/home/drag/Dr-plStyList-2/src/components/adminView/TitlesArtistQuery.js",["141","142"],"import {useState} from 'react'\nimport gql from 'graphql-tag'\nimport { useQuery } from '@apollo/react-hooks'\n// import { TextField, Typography } from '@material-ui/core'\nimport UrlTitleForm from './UrlTitleForm'\nimport Notifications from 'react-notify-toast'\n\nconst TITLE_DATA = gql`\n  query GetTitleData {\n    title_records\n    (\n      query: {url_exists: false} \n      sortBy: ARTIST_ASC)\n     {\n    _id\n     artist\n    titleName\n    chords_key\n    titleMBID\n    bpm\n    url\n    genres\n    tags{\n      genre\n      }}}\n`\nexport const TITLE_RECORD = gql`\nquery GetTitleRecord ($titleMBID: String){\n  title_record(query: {titleMBID: $titleMBID}) {\n    _id\n     artist\n    titleName\n    chords_key\n    titleMBID\n    bpm\n    url\n    genres\n    tags{\n      genre\n      }}}\n`\nexport const UPDATE_TITLE_GENRES = gql`\nmutation updateOneTitle_record ($titleMBID: String!, $genres:[String]){\n  updateOneTitle_record\n  (query: {titleMBID: $titleMBID}\n    set:{genres: $genres})  {\n    _id\n     artist\n    titleName\n    chords_key\n    titleMBID\n    bpm\n    url\n    genres\n    tags{\n      genre\n      }}}\n`\n\n// const UPDATE_TITLE = gql`\n// mutation UpdateTitleRecord ($titleMBID: String!, $url: String!){\n//  updateOneTitle_record(\n//     query: {titleMBID: $titleMBID}\n//     set: { url: $url}\n//     # skip: !$titleMBID\n//     ){\n//       titleName\n//       url\n//   }\n// }\n// `\n\nexport function TitlesArtistQuery() {\n  const { loading, error, data } = useQuery(TITLE_DATA)\n  // const { mutation_loading, mutation_error, mutation_data, refetch } = useMutation(UPDATE_TITLE_GENRES)\n  // const [handleUpdateTitleRecordURL] = useMutation(UPDATE_TITLE, {\n  //   variables: { titleMBID: 'data.titleMBID' },\n  //   skip: data == null\n  // })\n\n  const [url, setUrl] = useState(null)\n  const handleChange = (event) => {\n    setUrl(event.target.value);\n  }\n\n  if (loading) return <p>Loading...</p>\n  if (error) return <p>Error :( from TitleArtist Query {error.message} </p>\n\n  console.log(data.title_records.length)\n  let data1 = data.title_records.slice(0, 20)\n  // .filter(elem => elem.bpm > 149)\n  // filter(el => el.url == undefined)\n\n  console.log(data1)\n  return (\n    data1.map(({ _id, artist, titleName, bpm, chords_key, titleMBID, url, genres, tags }) => (\n      <div key={`title-data${_id}`} style={{\n        display: 'flex', flexDirection: 'column', paddingLeft: '3%',\n        borderBottom: '1px solid gray', maxWidth: '600 px'\n      }}>\n        <Notifications />\n        <p style={{ \"color\": \"blue\" }}>\n          {artist}: {titleName}\n          <p style={{ \"color\": \"red\" }} >\n            :: chords_key {chords_key} - bpm {bpm}\n          </p>\n          <p style={{ color: \"darkblue\" }} id={titleMBID}>\n            titleMBID: {titleMBID} <br />\n            titleURL: {url}  <br />\n            MBGenres: {tags.genre ? \"no tags defined\" : tags.genre} <br />\n            genres: {genres === null ? 'no genres yet' : genres.join('; ')} </p>\n        </p>\n        <div style={{ color: \" rgb(115, 41, 41)\", display: 'flex', alignItems: 'space-between' }}>\n          {/* {url != null ? <iframe width=\"180\"\n            src={`https://www.youtube.com/embed/${url}`}>\n          </iframe>\n            : <p>No url provided </p>} */}\n          <UrlTitleForm titleMBID={titleMBID}\n            MBGenres={tags.genre}\n            oldGenres={!genres ? [] : genres}\n            url={url}\n            key={_id + titleMBID} />\n\n        </div>\n      </div>\n    ))\n  )\n}\n","/home/drag/Dr-plStyList-2/src/components/navbar/PersistDrawer.jsx",[],"/home/drag/Dr-plStyList-2/src/components/adminView/UpdateFieldForm.js",["143","144","145","146","147","148"],"import React from 'react'\nimport { TextField, Typography } from '@material-ui/core'\nimport { notify } from 'react-notify-toast';\n\n\n// props - nameStr   updateMutation\n\nconst formStyles = {\n    display: 'flex',\n    flexDirection: 'column',\n    maxWidth: '90%',\n    margin: '1rem'\n}\n// https://stackoverflow.com/questions/650022/how-do-i-split-a-string-with-multiple-separators-in-javascript\n\n\nfunction splitMulti(str, tokens) {\n    var tempChar = tokens[0]; // We can use the first token as a temporary join character\n    for (var i = 1; i < tokens.length; i++) {\n        str = str.split(tokens[i]).join(tempChar);\n    }\n    str = str.split(tempChar);\n    return str;\n}\nexport function UpdateFieldForm(props) {\n    const { nameStr, titleMBID } = props\n    const getNewGenresArr = (nameStr, props) => {\n        if (nameStr === \"Genres\") {\n            // console.log(props.oldGenres)\n            const MBGenres = Array.isArray(props.MBGenres) ? props.MBGenres : []\n\n            // https://stackoverflow.com/questions/35235794/filter-strings-in-array-based-on-content\n\n            // var textToSearch = 'bedroom';\n            // var filteredArray = myArray.filter((str)=>{\n            //   return str.toLowerCase().indexOf(textToSearch.toLowerCase()) >= 0; \n            // });\n            const excludeString = 'object'\n            const oldGenres = props.oldGenres.filter(el => {\n                const substrIdx = el.toLowerCase().indexOf(excludeString.toLowerCase())\n                if (substrIdx < 0) return el\n\n            })\n\n\n            const newGenresArr0 = MBGenres.concat(oldGenres)\n            const newGenresArr = Array.from(new Set(newGenresArr0))\n            return newGenresArr\n        }\n    }\n\n    const newGenresArr = props.oldGenres == undefined ? [] : getNewGenresArr(nameStr, props)\n    const litNameStr = '${nameStr}'\n    const [valueStr, setValueStr] = React.useState('')\n    const h4String = (`Handle ${nameStr}`).toUpperCase()\n    const submFunction = props.onSubmit\n\n    return (\n        <form key={`${titleMBID}-${nameStr}`} style={formStyles}\n            onSubmit={(e) => {\n                e.preventDefault()\n                const splitters = ['/', ', ', '-', ' ']\n                const valuesArr = nameStr === \"Genres\" ? newGenresArr : []\n\n                console.log(nameStr + ' : ' + valueStr)\n                valuesArr.push(valueStr)\n\n                // get unique values from stackoverflow\n\n                let newValuesArr = [...new Set(splitMulti(valuesArr.join(', '), splitters)\n                    .map(el => el.trim()).filter(elem => elem !== ''))]\n                const updateObj = { titleMBID: titleMBID, valuesArr: newValuesArr }\n                console.log(updateObj)\n                props.onSubmit(updateObj)\n                    .then(result => {\n                        console.log(result)\n                        //     const { genres, tags } = result\n                    }).catch(error => {\n                        notify.show(error.message, \"error\")\n                        console.log(error.message)\n                    })\n                // handleUpdateGenres(valueStr)\n\n                // h4String = \" field updated\"\n                // setUrlString('')\n            }}>\n            <Typography component={\"h4\"} align={\"left\"} gutterBottom={true}>{h4String}</Typography>\n            <TextField id={nameStr} label={nameStr} name={nameStr}\n                value={valueStr} placeholder={nameStr}\n                onChange={event => {\n                    event.preventDefault()\n                    let newValueStr = event.target.value\n                    // console.log(newValueStr)\n                    setValueStr(newValueStr)\n                }}\n                value={valueStr}\n                // required={true}\n                variant={'outlined'}\n                helperText={`Set ${nameStr}`}\n            />\n            <button type=\"submit\">{`update ${nameStr}`}</button>\n        </form>\n    )\n}","/home/drag/Dr-plStyList-2/src/components/authUsers/LoginModal.js",[],"/home/drag/Dr-plStyList-2/src/components/authUsers/Login.js",["149","150"],"import React, { useContext } from 'react'\nimport * as RealmWeb from \"realm-web\"\nimport { app } from '../../index'\nimport * as types from '../../stateContext/types'\nimport { AppContext } from '../../stateContext/indexContext'\nimport { Button, Typography } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        backgroundColor: \"#ff1166\",\n        margin: '1rem, 0',\n        label: {\n            color: \"secondary\",\n            fontSize: '3rem'\n        }\n    }\n}))\n\nexport const LogButton = () => {\n    const classes = useStyles()\n    const [appState, dispatch] = useContext(AppContext)\n    function UserDetail() {\n        return (\n            <div>\n                <h4>Logged in with anonymous id: {appState.userId}</h4>\n            </div>\n        );\n    }\n    const LoginButton = () => {\n        return (<Button variant=\"outlined\"\n            className={classes.button}\n            onClick={loginAnonymous}>\n            Log In\n        </Button>)\n    }\n    const LogOutButton = () => {\n        return (<Button variant=\"text\" color=\"default\"\n            onClick={logOut}>\n            Log Out\n        </Button>)\n    }\n    const logOut = async () => {\n        await app.logOut()\n        dispatch({\n            type: types.SET_USER_DATA,\n            payload: ''\n        })\n    }\nconst loginAnonymous = async () => {\n\n        const credentials = RealmWeb.Credentials.anonymous();\n\n        const user = await app.logIn(credentials)\n\n        dispatch({\n            type: types.SET_USER_DATA,\n            payload: {\n                userID: user.id,\n            }\n        })\n        console.log(\"Successfully logged in!\", user)\n\n    }\n    return (\n        <React.Fragment>\n            {appState.userId === '' ?\n                <LoginButton /> : <LogOutButton />}\n        </React.Fragment>\n    )\n}",["151","152"],"/home/drag/Dr-plStyList-2/src/components/player/demoUrls.js",[],"/home/drag/Dr-plStyList-2/src/components/UserView/SlidersForm.js",["153","154"],"import { useState, useContext } from 'react'\nimport { AppContext } from '../../stateContext/indexContext'\nimport * as types from '../../stateContext/types'\nimport SliderMUI from './SliderMUI'\nimport { Button, Divider, Grid, Grow, makeStyles } from '@material-ui/core'\n// import { genresList } from '../../workers/genresAndInstrumentsList'\nimport { descriptorsList } from '../../workers/descriptorsList'\nimport { ButtonsGroupMultiple } from './GenreButton'\n// import { blueGrey } from '@material-ui/core/colors'\nimport { app, getNewPlayList } from '../../index'\n// import SnackBar from './SnackBar'\nimport Notifications, { notify } from 'react-notify-toast'\nimport { notifyOptions } from './notifyOptions'\n// import PlayerCard from '../player/PlayerCard'\n// import PlayerControlButtons from '../player/PlayerControlButtons'\n// import PlayerCard from '../player/PlayerCard'\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    overflow: 'hidden',\n    // backgroundImage: 'url(music-player-circle-start.svg)',\n  },\n  gridList: {\n    width: 200,\n    height: 100\n  },\n  paper: {\n    padding: '2%',\n    margin: 'auto'\n  },\n  // buttonGroup: {\n  //     marginBottom: '1%',\n  //     marginLeft: '0.3 rem'\n\n  // }\n}))\n\nconst stateObj = {\n  randomInt: { min: 120, max: 180, step: 5, value: 180 },\n  Brightness: { min: 0, max: 100, step: 5, value: 65 },\n  Loudness: {\n    min: 1, max: 100, step: 5, value: 20,\n    valueLabelFormat: (x) => x + 60\n  },\n  Tempo: { min: 60, max: 180, step: 5, value: 10 },\n  Diversity: { min: 10, max: 50, step: 10, value: 10 },\n  diversityStrings: [],\n  genresButtons: {}\n}\n\nexport default function SlidersForm() {\n\n  const [state, setState] = useState(stateObj)\n  const [appState, dispatch] = useContext(AppContext)\n  const includedGenres = appState.genresArr.join(' ').split(' ')\n    .filter(el => el !== 'general' && el !== 'and')\n\n  const customInput = {\n    bpm: state.Tempo.value + 70,\n    delta: state.Diversity.value,\n    average_loudness: state.Loudness.value,\n    spectral_centroid: state.Brightness.value,\n    genresArr: includedGenres\n  }\n  const setNewPlaylist = customInput => {\n    console.log(customInput)\n    getNewPlayList(customInput)\n      .then(playlist => {\n        console.log(playlist)\n        dispatch({\n          type: types.SET_NEW_PLAYLIST,\n          payload: playlist\n        })\n        dispatch({\n          type: types.SET_URL_IDX,\n          payload: 0\n        })\n        dispatch({\n          type: types.SET_PLAYING,\n          payload: true\n        })\n        console.log(appState.playlist)\n      })\n  }\n\n  const onSliderChange = name => (ev, value) => {\n    setState({ ...state, [name]: { ...state[name], value: value } })\n    // setState({\n    //     ...state, [name]: value\n    // })\n    // alert(state[name])\n  }\n  const handleCommit = name => (ev, value) => {\n\n    console.log(state[name])\n    setState({ ...state, [name]: { ...state[name], value: value } })\n  }\n\n  const onSubmit = async (e) => {\n    e.preventDefault()\n    !app.currentUser ?\n      notify.show('You have to log in', 'error', 7000)\n      : !appState.genresArr.length ?\n        notify.show('You have to select at last one genre button or select all genres', \"error\", 7000)\n        : setNewPlaylist(customInput)\n  }\n\n  const classes = useStyles()\n  return (\n    <div style={{ padding: '1rem', margin: 'auto' }}>\n      <Notifications\n        options={notifyOptions} />\n      <Grid container\n        // xs={12}\n        // lg={10}\n        // xl={6}\n        spacing={1}\n        direction={'row'}\n        justifyContent={'space-around'}\n        alignItems={'baseline'}\n        className={classes.root}\n      // style={{ border: '1px solid blue' }}\n      >\n        <Grid item container sm={6}//descriptor sliders\n          direction={'column'}\n          // justifyContent={'st'}\n          // alignItems={'center'}\n          style={{ backgroundColor: 'none', height: '100%' }}>\n          {descriptorsList.map((descriptor, key) => (\n            <Grid item sm={12}>\n              < SliderMUI key={key}\n                value={state[descriptor].value}\n                defaultValue={state[descriptor].value}\n                min={state[descriptor].min}\n                max={state[descriptor].max}\n                step={state[descriptor].step}\n                // aria-text={descriptor}\n                sliderText={descriptor}\n                disabled={!appState.descriptorsArr.includes(descriptor)}\n                name={descriptor}\n                onChange={onSliderChange(descriptor)}\n                onChangeComitted={handleCommit(descriptor)}\n                valueLabelFormat={descriptor === \"Tempo\" ?\n                  state.Tempo.valueLabelFormat : (x) => x = x}\n              />\n            </Grid>\n          ))}\n\n          {/* <Divider variant='middle' /> */}\n          {/* </Paper> */}\n        </Grid>\n\n        {/* <Divider orienta4tion='horizontal' flexItem /> */}\n\n        <Grid container item sm={6} //diversity\n        // style={{ backgroundColor: blueGrey[200], height: '100%' }}\n        >\n          <SliderMUI item\n            //  height='10%'\n            sliderText='Diversity'\n            value={state.Diversity.value}\n            defaultValue={state.Diversity.value}\n            min={state.Diversity.min}\n            max={state.Diversity.max}\n            step={state.Diversity.step}\n            // aria-text={'Diversity'}\n            name={'Diversity'}\n            onChange={onSliderChange('Diversity')}\n            onChangeComitted={handleCommit('Diversity')} />\n\n          <ButtonsGroupMultiple sm={4} inputArr={descriptorsList} selected={false}\n            classes={classes.buttonGroup} />\n          <Grow in={true}\n            style={{ transformOrigin: '100 0 20' }}\n            timeout={1800}>\n            <Button size={'medium'}\n              style={{ margin: '2% 0' }}\n              variant=\"outlined\"\n              onClick={onSubmit}\n              type='submit'\n              fullWidth >Generate Playlist</Button>\n          </Grow>\n        </Grid>\n\n      </Grid>\n    </div >\n  )\n}\n","/home/drag/Dr-plStyList-2/src/components/navbar/InfoBox.jsx",["155","156","157","158","159","160","161","162","163","164"],"import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel'\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary'\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails'\nimport Typography from '@material-ui/core/Typography'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\nimport GenreButton from '../UserView/GenreButton'\nimport Modal from '@material-ui/core/Modal';\nimport { Button } from '@material-ui/core'\n\nfunction rand() {\n    return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n    const top = 50 + rand();\n    const left = 50 + rand();\n\n    return {\n        top: `${top}%`,\n        left: `${left}%`,\n        transform: `translate(-${top}%, -${left}%)`,\n    };\n}\n\nconst useStyles = makeStyles(theme => ({\n    paper: {\n        position: 'absolute',\n        width: 350,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #ffffff',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(1, 4, 3),\n        margin: theme.spacing(1)\n    },\n    button:{\n        backgroundColor: \"#ff1166\",\n        // padding: '1rem, 0',\n        label:{\n            color: \"secondary\",\n            fontSize: '3rem'\n        }\n    }\n}));\n\nexport default function InfoBox() {\n    const classes = useStyles();\n    // getModalStyle is not a pure function, we roll the style only on the first render\n    const [modalStyle] = React.useState(getModalStyle);\n    const [open, setOpen] = React.useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div>\n           {/* <div> */}\n             <Button\n              variant=\"outlined\"\n            size='small'\n            color='inherit'\n            backgroundColor='#ff1133'\n            fontSize='0.8rem'\n            onClick={handleOpen}>\n               App Info\n                </Button>\n                {/* </div> */}\n                      <Modal\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n                open={open}\n                onClose={handleClose}\n                onClick={handleClose}\n            >\n                <div style={modalStyle} className={classes.paper}>\n                    <h2 id=\"simple-modal-title\">How to use</h2>\n                    <p id=\"simple-modal-description\">\n                    <Typography>\n//          Всяка една от композициите е избрана лично от опитен музикален редактор с доказано добър вкус.<br/>\n//          Изберете жанр, средно темпо и средна гръмкост и ще получите първите пет предложения.<br/>\n//          С Diversity управлявате диапазон на темпо, гръмкост и усреднена честота на траковете вътре в плейлистата.<br/>\n//          Можете да харесвате и нехаресвате конкретен трак. <br/>\n//          Регистрираните потребители могат да следват хората, които предлагат траковете и да запазват плейлисти.\n     </Typography>\n          </p>\n\n                </div>\n            </Modal>\n        </div>\n    );\n}\n\n\n\n// const useStyles = makeStyles(theme => ({\n//   root: {\n//     width: '60%',\n//   },\n//   heading: {\n//     fontSize: theme.typography.pxToRem(15),\n//     fontWeight: theme.typography.fontWeightRegular,\n//   },\n// }))\n\n// export default function InfoBox() {\n//   const classes = useStyles()\n\n//   return (\n//     <div className={classes.root}>\n//       <ExpansionPanel>\n//         <ExpansionPanelSummary\n//           expandIcon={<ExpandMoreIcon />}\n//           aria-controls=\"panel1a-content\"\n//           id=\"panel1a-header\"\n//         >\n//           <Typography className={classes.heading}>Expansion Panel 1</Typography>\n//         </ExpansionPanelSummary>\n//         <ExpansionPanelDetails>\n//           <Typography>\n//           <Typography paragraph>\n\n//          <Typography paragraph>\n//          Това е приложение за генериране на плейлисти в които няма да имате усещането, че слушате едно и също парче по много пъти!<br/>\n//          </Typography>\n//          Всяка една от композициите е избрана лично от висококласен музикален редактор с доказано добър вкус.<br/>\n//          Изберете жанр, средно темпо и средна гръмкост и ще получите първите пет предложения.<br/>\n//          С Diversity управлявате колко често да се сменят стила и темпата на траковете вътре в плейлистата.<br/>\n//          Можете да харесвате и нехаресвате конкретен трак. <br/>\n//          Регистрираните потребители могат да следват хората, които предлагат траковете и да запазват плейлисти<div className=\"\"></div><div className=\"\"></div>\n//          <div className=\"\"></div>\n//        </Typography>\n//           </Typography>\n//         </ExpansionPanelDetails>\n//       </ExpansionPanel>\n//       <ExpansionPanel>\n//         <ExpansionPanelSummary\n//           expandIcon={<ExpandMoreIcon />}\n//           aria-controls=\"panel2a-content\"\n//           id=\"panel2a-header\"\n//         >\n//           <Typography className={classes.heading}>Expansion Panel 2</Typography>\n//         </ExpansionPanelSummary>\n//         <ExpansionPanelDetails>\n//           <Typography>\n//             Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse malesuada lacus ex,\n//             sit amet blandit leo lobortis eget.\n//           </Typography>\n//         </ExpansionPanelDetails>\n//       </ExpansionPanel>\n//       <ExpansionPanel disabled>\n//         <ExpansionPanelSummary\n//           expandIcon={<ExpandMoreIcon />}\n//           aria-controls=\"panel3a-content\"\n//           id=\"panel3a-header\"\n//         >\n//           <Typography className={classes.heading}>Disabled Expansion Panel</Typography>\n//         </ExpansionPanelSummary>\n//       </ExpansionPanel>\n//     </div>\n//   )\n// }\n","/home/drag/Dr-plStyList-2/src/components/UserView/notifyOptions.js",[],"/home/drag/Dr-plStyList-2/src/components/UserView/SnackBar.js",["165","166","167","168","169"],"import React, { useState, useContext } from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\nimport { AppContext } from '../../stateContext/indexContext'\nimport { SET_ALERT_OPEN } from '../../stateContext/types'\nimport { Button } from '@material-ui/core'\n\n\n\nexport default function SnackBar() {\n    const [appState, dispatch] = useContext(AppContext)\nconst alertOpen = false\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        dispatch({\n            type: SET_ALERT_OPEN,\n            payload: false\n        })\n    }\n    return (\n        <div>\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                open={alertOpen}\n                autoHideDuration={6000}\n                onClose={handleClose}\n                message=\"Note archived\"\n            // action={\n            //     <React.Fragment>\n            //         <Button color=\"secondary\" size=\"small\" onClick={handleClose}>\n            //             UNDO  </Button>\n\n            //         <IconButton size=\"small\" aria-label=\"close\" color=\"inherit\" onClick={handleClose}>\n            //             <CloseIcon fontSize=\"small\" />\n            //         </IconButton>\n            //     </React.Fragment>\n            // }\n            > You have to choose at least one genre </Snackbar>\n        </div>\n    )\n}\n","/home/drag/Dr-plStyList-2/src/components/UserView/SliderMUI.js",[],"/home/drag/Dr-plStyList-2/src/components/UserView/GenreButton.jsx",[],["170","171"],"/home/drag/Dr-plStyList-2/src/components/player/PlayerCard.jsx",[],["172","173"],"/home/drag/Dr-plStyList-2/src/components/player/TitlesList.js",["174"],"import { useContext } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Divider from '@material-ui/core/Divider'\nimport PlayArrowIcon from '@material-ui/icons/PlayCircleOutline'\nimport ThumbUpAltOutlinedIcon from '@material-ui/icons/ThumbUpAltOutlined'\nimport FavoriteOutlinedIcon from '@material-ui/icons/FavoriteOutlined'\nimport { AppContext } from '../../stateContext/indexContext'\n\nimport * as types from '../../stateContext/types'\nimport { Tooltip } from '@material-ui/core'\nimport { app } from '../../../src/index.js'\n\nconst user = app.currentUser\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    maxWidth: 460,\n    backgroundColor: theme.palette.background.paper,\n  },\n}))\n\nexport default function TitlesList(props) {\n  const classes = useStyles()\n  const [appState, dispatch] = useContext(AppContext)\n  console.log(appState)\n\n\n  const addLikeAndFaforit = index => (e) => {\n    e.preventDefault()\n    const userId = appState.userId\n    const clientUserName = appState.userName\n    const titleId = appState.playlist[index]._id.toString()\n    const sendObj = {userId, titleId, clientUserName}\n    console.log('adding to favorits and likes', sendObj)\n\n    app.currentUser.callFunction('addToFavorits', sendObj)\n  }\n  const setAppStateIdx = index => (e) => {\n    e.preventDefault()\n    console.log(index)\n    dispatch({\n      type: types.SET_URL_IDX,\n      payload: index\n    })\n  }\n\n  return (\n    <div className={classes.root}>\n\n      <List component=\"nav\" aria-label=\"playlist titles\">\n        {appState.playlist.map((elem, index) => (\n          <ListItem\n            key={index}\n            button\n            selected={appState.urlIdx === index}\n            onClick={setAppStateIdx(index)}\n          >\n            <ListItemIcon>\n              <PlayArrowIcon />\n            </ListItemIcon>\n            <ListItemText primary={elem.artist}\n              secondary={elem.titleName} />\n            <Divider />\n            <ListItemIcon>\n              <Tooltip title='Like this title' placement='top-start' arrow\n                onClick = {addLikeAndFaforit(index)} >\n                <ThumbUpAltOutlinedIcon />\n              </Tooltip>\n            </ListItemIcon>\n           { appState.userName !== '' &&  <ListItemIcon>\n              <Tooltip title='Add to personal favorits' placement='bottom' arrow >\n                < FavoriteOutlinedIcon\n                  onClick={addLikeAndFaforit(index)} />\n              </Tooltip>\n            </ListItemIcon>}\n          </ListItem>\n        ))}\n      </List>\n      {/* \n      <List component=\"nav\" aria-label=\"secondary mailbox folder\">\n        <ListItem\n          button\n          selected={props.urlIndex === 2}\n          onClick={(event) => handleListItemClick(event, 2)}\n        >\n          <ListItemText primary=\"Trash\" />\n        </ListItem>\n        <ListItem\n          button\n          selected={props.urlIndex === 3}\n          onClick={(event) => handleListItemClick(event, 3)}\n        >\n          <ListItemText primary=\"Spam\" />\n        </ListItem>\n      </List> */}\n    </div>\n  )\n}\n","/home/drag/Dr-plStyList-2/src/components/player/PlayerControlButtons.jsx",[],"/home/drag/Dr-plStyList-2/src/components/UserView/GenresButtonsGroup.js",["175"],"import { useContext } from 'react'\nimport { AppContext } from '../../stateContext/indexContext'\nimport * as types from '../../stateContext/types'\nimport { Button} from '@material-ui/core'\nimport { genresList } from '../../workers/genresAndInstrumentsList'\nimport { ButtonsGroupMultiple } from './GenreButton'\nimport { blueGrey } from '@material-ui/core/colors'\n\n\n\nexport default function GenresButtonsGroup() {\n    const [appState, dispatch] = useContext(AppContext)\n    const toggleAllGenres = e => {\n        e.preventDefault()\n        dispatch({\n            type: types.SET_GENRES,\n            payload: genresList\n        })\n    }\n    const deselectAllGenres = e => {\n        e.preventDefault()\n        dispatch({\n            type: types.SET_GENRES,\n            payload: []\n        })\n    }\n    return (\n        <>\n            <Button style={{\n                margin: '2% 0',\n                backgroundColor: blueGrey[400],\n                color: 'white'\n            }}\n                onClick={toggleAllGenres}\n                fullWidth  > Select All Genres</Button>\n\n            <ButtonsGroupMultiple inputArr={genresList}\n                selected={true} sm={6}\n            />\n            <Button style={{ margin: '2% 0' }}\n                variant=\"outlined\"\n                onClick={deselectAllGenres}\n                // type='submit'\n                fullWidth  > DeSelect All Genres</Button>\n        </>\n    )\n}\n","/home/drag/Dr-plStyList-2/src/components/player/PlayerDr.js",[],"/home/drag/Dr-plStyList-2/src/credential/AppId.js",[],{"ruleId":"176","severity":1,"message":"177","line":1,"column":33,"nodeType":"178","messageId":"179","endLine":1,"endColumn":43},{"ruleId":"176","severity":1,"message":"180","line":3,"column":30,"nodeType":"178","messageId":"179","endLine":3,"endColumn":40},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","replacedBy":"184"},{"ruleId":"176","severity":1,"message":"185","line":13,"column":33,"nodeType":"178","messageId":"179","endLine":13,"endColumn":39},{"ruleId":"176","severity":1,"message":"186","line":81,"column":10,"nodeType":"178","messageId":"179","endLine":81,"endColumn":13},{"ruleId":"176","severity":1,"message":"187","line":82,"column":9,"nodeType":"178","messageId":"179","endLine":82,"endColumn":21},{"ruleId":"188","severity":1,"message":"189","line":39,"column":57,"nodeType":"190","messageId":"191","endLine":39,"endColumn":59},{"ruleId":"192","severity":1,"message":"193","line":52,"column":42,"nodeType":"194","messageId":"195","endLine":52,"endColumn":44},{"ruleId":"176","severity":1,"message":"196","line":53,"column":11,"nodeType":"178","messageId":"179","endLine":53,"endColumn":21},{"ruleId":"197","severity":1,"message":"198","line":53,"column":24,"nodeType":"199","messageId":"200","endLine":53,"endColumn":36},{"ruleId":"176","severity":1,"message":"201","line":56,"column":11,"nodeType":"178","messageId":"179","endLine":56,"endColumn":23},{"ruleId":"202","severity":1,"message":"203","line":96,"column":17,"nodeType":"204","endLine":96,"endColumn":33},{"ruleId":"176","severity":1,"message":"205","line":6,"column":18,"nodeType":"178","messageId":"179","endLine":6,"endColumn":28},{"ruleId":"176","severity":1,"message":"206","line":23,"column":14,"nodeType":"178","messageId":"179","endLine":23,"endColumn":24},{"ruleId":"181","replacedBy":"207"},{"ruleId":"183","replacedBy":"208"},{"ruleId":"176","severity":1,"message":"209","line":5,"column":18,"nodeType":"178","messageId":"179","endLine":5,"endColumn":25},{"ruleId":"210","severity":1,"message":"211","line":147,"column":61,"nodeType":"178","messageId":"212","endLine":147,"endColumn":62},{"ruleId":"176","severity":1,"message":"213","line":3,"column":8,"nodeType":"178","messageId":"179","endLine":3,"endColumn":22},{"ruleId":"176","severity":1,"message":"214","line":4,"column":8,"nodeType":"178","messageId":"179","endLine":4,"endColumn":29},{"ruleId":"176","severity":1,"message":"215","line":5,"column":8,"nodeType":"178","messageId":"179","endLine":5,"endColumn":29},{"ruleId":"176","severity":1,"message":"216","line":7,"column":8,"nodeType":"178","messageId":"179","endLine":7,"endColumn":22},{"ruleId":"176","severity":1,"message":"217","line":8,"column":8,"nodeType":"178","messageId":"179","endLine":8,"endColumn":19},{"ruleId":"218","severity":1,"message":"219","line":84,"column":33,"nodeType":"199","endLine":85,"endColumn":107},{"ruleId":"218","severity":1,"message":"219","line":85,"column":112,"nodeType":"199","endLine":86,"endColumn":97},{"ruleId":"218","severity":1,"message":"219","line":86,"column":102,"nodeType":"199","endLine":87,"endColumn":118},{"ruleId":"218","severity":1,"message":"219","line":87,"column":123,"nodeType":"199","endLine":88,"endColumn":63},{"ruleId":"218","severity":1,"message":"219","line":88,"column":68,"nodeType":"199","endLine":90,"endColumn":6},{"ruleId":"176","severity":1,"message":"220","line":1,"column":17,"nodeType":"178","messageId":"179","endLine":1,"endColumn":25},{"ruleId":"176","severity":1,"message":"221","line":3,"column":8,"nodeType":"178","messageId":"179","endLine":3,"endColumn":18},{"ruleId":"176","severity":1,"message":"222","line":4,"column":8,"nodeType":"178","messageId":"179","endLine":4,"endColumn":17},{"ruleId":"176","severity":1,"message":"223","line":7,"column":10,"nodeType":"178","messageId":"179","endLine":7,"endColumn":16},{"ruleId":"176","severity":1,"message":"224","line":12,"column":12,"nodeType":"178","messageId":"179","endLine":12,"endColumn":20},{"ruleId":"181","replacedBy":"225"},{"ruleId":"183","replacedBy":"226"},{"ruleId":"181","replacedBy":"227"},{"ruleId":"183","replacedBy":"228"},{"ruleId":"176","severity":1,"message":"229","line":17,"column":7,"nodeType":"178","messageId":"179","endLine":17,"endColumn":11},{"ruleId":"176","severity":1,"message":"224","line":12,"column":12,"nodeType":"178","messageId":"179","endLine":12,"endColumn":20},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'AppContext' is defined but never used.","no-native-reassign",["230"],"no-negated-in-lhs",["231"],"'genres' is assigned a value but never used.","'url' is assigned a value but never used.","'handleChange' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'litNameStr' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","'submFunction' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Typography' is defined but never used.","'UserDetail' is defined but never used.",["230"],["231"],"'Divider' is defined but never used.","no-self-assign","'x' is assigned to itself.","selfAssignment","'ExpansionPanel' is defined but never used.","'ExpansionPanelSummary' is defined but never used.","'ExpansionPanelDetails' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'GenreButton' is defined but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","'useState' is defined but never used.","'IconButton' is defined but never used.","'CloseIcon' is defined but never used.","'Button' is defined but never used.","'appState' is assigned a value but never used.",["230"],["231"],["230"],["231"],"'user' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]